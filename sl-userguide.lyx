#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
SQL-Ledger User Guide
\end_layout

\begin_layout Author
Written by
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Armaghan Saqib
\begin_inset Newline newline
\end_inset

Sebastian Weitmann
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

International SQL-Ledger Network Association
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter*
Preface
\end_layout

\begin_layout Standard
This manual describes how to install and use SQL-Ledger.
 It gives an overview of the various features that are available in SQL-Ledger
 and explains how to use them.
 
\end_layout

\begin_layout Standard
We wrote this manual to support the free distribution of SQL-Ledger and
 to help existing SQL-Ledger users broaden their knowledge base.
 We have divided it into 6 chapters.
 
\end_layout

\begin_layout Standard
The first chapter introduces SQL-Ledger and explains how to get it up and
 running.
 The second chapter tells you how to set up and adapt SQL-Ledger to fit
 your own business needs.
 It explains how to create users, customers, vendors and everything else
 you need to do before you start working.
 
\end_layout

\begin_layout Standard
The third chapter highlights how to process your day to day business trans-
 actions in SQL-Ledger.
 It will tell you how to register invoices, how to make a general ledger
 entry and how to enter all your other related business transactions.
 
\end_layout

\begin_layout Standard
The fourth chapter explaines how to take advantage of all the information
 you have entered, in other words, how to keep track of your business.
 You will learn how to start analyzing your business data and transactions
 that are stored in the database.
\end_layout

\begin_layout Standard
The fifth chapter provides you with information about LedgerCart.
 LedgerCart is a very nice add-on tool that can instantly upgrade your SQL-Ledge
r installation into a fully functional web-based ordering system and customer
 portal.
 The sixth and last chapter gives you an introduction to SQL-Ledger development
 and customization.
 
\end_layout

\begin_layout Standard
This user manual is published under the Creative Commons (CC) Attribution
 and Share-alike (BY-SA) licence, which is one of several public copyright
 licenses that enable the free distribution of an otherwise copyrighted
 work.
 A CC license is used when authors want to give people the right to share,
 use, and build upon a work that they have created.
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Introducing SQL-Ledger
\end_layout

\begin_layout Standard
SQL-Ledger is a free ERP (Enterprise Resource Planning) double entry accounting
 software with a rich set of management information features.
 It supports multiple users, multiple languages, multiple currencies, multiple
 companies, accounts receivable, accounts payable and stock tracking.
 
\end_layout

\begin_layout Standard
It’s a web-server application that has already been translated into 30 languages
 and enables business management and administration over the Internet or
 on a private local network.
 Any web browser can used as its standard user interface which makes SQL-Ledger
 platform independent and usable on practically any operating system.
 
\end_layout

\begin_layout Standard
SQL-Ledger is written in the programming language Perl, runs on any modern
 web server like Apache and stores all related business data in a SQL database
 such as PostgreSQL, Oracle or IBM DB2.
 Its version 1.0 was released in Jan.
 29, 1999.
 So as of this writing in 2014, it is 15 years old software which has been
 under constant development and enhancement during this period.
 This makes it suitable enough for small as well as for large businesses.
\end_layout

\begin_layout Standard
SQL-Ledger has an impressive feature set which even many commercial / proprietar
y ERP solutions don't provide.
 Its internal design and user interface are simple which make it easy to
 learn.
\end_layout

\begin_layout Standard
Invoices, Packing Lists, Income Statements, Balance Sheets, Sales, Work
 and Purchase Orders, Statements, Receipts and Checks are generated from
 templates and can be changed to suit individual needs.
 Templates come in html, xml, tex and text format.
 The tex templates are processed with LaTex to produce postscript and PDF
 documents.
 Documents can be sent to a printer, file or fax, emailed or displayed on
 screen.
 The translation mechanism for items and foreign language templates also
 make it possible to invoice in any foreign language.
\end_layout

\begin_layout Standard
SQL-Ledger is developed by DWS Systems Inc.
 and the International SQL-Ledger Network Association.
 It is licensed under the GNU GENERAL PUBLIC LICENSE commonly known as the
 GPL.
\end_layout

\begin_layout Subsection
Versions
\end_layout

\begin_layout Standard
The current release of stock SQL-Ledger is 3.0.6.
 The International SQL-Ledger Network Association also maintains its own
 version of SQL-Ledger.
 It’s developed openly by the International SQL-Ledger Network Community
 on GitHub and is based upon the original SQL-Ledger version 3.0.6 with its
 enhancements.
 We call it the SQL-Ledger Network version, or Ledger123 release 3.
 The SQL-Ledger Network version alias Ledger123 tries to incorporate all
 the goodness which comes from stock SQL-Ledger.
 So you get best of both worlds.
 
\end_layout

\begin_layout Standard
To make things simple, we assume that you are using the SQL-Ledger Network
 version (Ledger123 release 3).
 Though most of the sections would apply equally well to the stock SQL-Ledger
 3 as well as older versions.
 This is particularly true if you are not using inventory related functions,
 because most of the enhancements in the SQL-Ledger Network version are
 related to inventory.
\end_layout

\begin_layout Subsection
Website and other resources on Internet
\end_layout

\begin_layout Standard
International SQL-Ledger Network Association website
\end_layout

\begin_layout Itemize
http://www.sql-ledger-network.com/
\end_layout

\begin_layout Standard
International SQL-Ledger Network Association Support Forum
\end_layout

\begin_layout Itemize
http//forum.sql-ledger-network.com/
\end_layout

\begin_layout Standard
Github repository for the SQL-Ledger Network version (Ledger123 release
 3)
\end_layout

\begin_layout Itemize
https://github.com/ledger123/ledger123
\end_layout

\begin_layout Standard
SQL-Ledger website
\end_layout

\begin_layout Itemize
http://www.SQL-Ledger.com/
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Getting up and running
\end_layout

\begin_layout Standard
Before you install SQL-Ledger on your chosen operating system, you first
 need to install a set of other software applications that work together
 with SQL-Ledger and create the base for it to function.
 SQL-Ledger requires the following:
\end_layout

\begin_layout Itemize
Web Server (Apache, NCSA, httpi, thttpd, ...
 );
\end_layout

\begin_layout Itemize
Perl (version 5 or newer);
\end_layout

\begin_layout Itemize
Database Server (PostgreSQL version 7.1 or newer)
\end_layout

\begin_layout Itemize
Database Driver (DBD-Pg)
\end_layout

\begin_layout Itemize
Database Independent Interface (DBI)
\end_layout

\begin_layout Itemize
LaTex (optional)
\end_layout

\begin_layout Standard
You will find various SQL-Ledger step-by-step installation guides on the
 International SQL-Ledger Network website (www.sql-ledger-network.com).
\end_layout

\begin_layout Subsection
Installing the SQL-Ledger Network version using 'git clone'
\end_layout

\begin_layout Standard
The recommended way to download and install the SQL-Ledger Network version
 is to use the 'git' package.
 To install git on Ubuntu, you run 'sudo apt-get install git-core'.
 Once git is successfully installed, you can do the following steps:
\end_layout

\begin_layout Enumerate
Download the SQL-Ledger Network GitHub repository.
 You will get a fully working SQL-Ledger installation which includes our
 enhancements.
 (The default 'master' branch)
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language=bash,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout
\align left

git clone git://github.com/ledger123/ledger123.git 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
You are probably interested in the latest release 3.
 The following command will switch to it.
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout
\align left

git checkout -b rel3 origin/rel3
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
From now onwards you can upgrade to our latest enhancements (which includes
 any latest releases from SQL-Ledger.com) with the following simple command:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git pull
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Let us say you are not interested in our enhancements and just want to maintain
 and upgrade to the SQL-Ledger release from SQL-Ledger.com.
 Switch to the SQL-Ledger branch first time:
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

git checkout -b SQL-Ledger origin/SQL-Ledger
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
You can also switch back to any past SQL-Ledger version.
 First see a log of all commits and 40 chars hashes:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git log --pretty=oneline
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
To revert to SQL-Ledger 2.8.17 type
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git checkout 7b15e9b
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: To view all code changes, you can visit https://github.com/ledger123/ledger
123 and select the chosen branch.
\end_layout

\begin_layout Subsection
Installing Perl modules
\end_layout

\begin_layout Standard
Future versions of our enhanced SQL-Ledger release may add dependencies
 to some Perl modules.
 Before adding any such dependencies we shall make sure these Perl modules
 can be installed on most common Linux distributions without much hassle.
\end_layout

\begin_layout Standard
There are three ways to install any Perl module:
\end_layout

\begin_layout Enumerate
Install the pre-built for your Linux distributiion package manager (apt-get
 or yum)
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

apt-get install libdbix-simple-perl # ubuntu / debian
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Install using cpan command.
 cpan command comes built-in with the Perl installation on all distributions.
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cpan DBIx::Simple
\end_layout

\end_inset

You may need to answer to few configuration questions when you are running
 cpan for the first time.
\end_layout

\begin_layout Enumerate
Install using cpanm (cpanminus) which is relatively less complicated than
 cpan.
 You can install cpanm with following command:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

curl -L http://cpanmin.us | perl - App::cpanminus
\end_layout

\end_inset

Once installed, you can install Perl module of your choice with:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cpanm DBIx::Simple
\end_layout

\end_inset


\end_layout

\begin_layout Section
Our enhancements to standard SQL-Ledger
\end_layout

\begin_layout Subsection
Departments
\end_layout

\begin_layout Enumerate
Restrict user to a particular department using admin.pl.
 
\end_layout

\begin_layout Enumerate
Default department for user.
 
\end_layout

\begin_layout Enumerate
Department is mandatory on invoices/orders/quotes if there is at least one
 department defined.
 
\end_layout

\begin_layout Subsection
Warehouses
\end_layout

\begin_layout Enumerate
Warehouse transfers module.
\end_layout

\begin_layout Enumerate
Restrict user to a particular warehouse using admin.pl.
\end_layout

\begin_layout Enumerate
Default warehouse for user.
\end_layout

\begin_layout Enumerate
Track warehouse inventory from sales and purchase invoices.
\end_layout

\begin_layout Enumerate
Track inventory-in-transit between warehouse movement.
\end_layout

\begin_layout Enumerate
Warehouse is mandatory on invoices if there is at least one warehouse defined.
 
\end_layout

\begin_layout Enumerate
Warehouse on-hand and activity reports.
 
\end_layout

\begin_layout Subsection
COGS
\end_layout

\begin_layout Enumerate
Re-posting script which corrects cogs errors due to invoice editing.
 
\end_layout

\begin_layout Enumerate
Invoice and invoice-item cogs/revenue information with gross profit %age.
 
\end_layout

\begin_layout Enumerate
On-hand value report which shows the inventory onhand quantities and value
 based upon FIFO costing.
 
\end_layout

\begin_layout Subsection
Reports
\end_layout

\begin_layout Enumerate
Per-invoice and per-item cogs/revenue information.
 
\end_layout

\begin_layout Enumerate
Enhanced tax reports.
 Audit trail report.
 
\end_layout

\begin_layout Enumerate
Drill-down to transactions from income statement.
 
\end_layout

\begin_layout Enumerate
Invoice date and customer/vendor filter in ‘All Items’ report.
 
\end_layout

\begin_layout Enumerate
Account description in ‘GL Reports’.
 
\end_layout

\begin_layout Enumerate
Account activity report using ‘GL Reports’.
 
\end_layout

\begin_layout Enumerate
Save report search conditions and layout in user menu.
 Recall with a single click.
 
\end_layout

\begin_layout Subsection
Others
\end_layout

\begin_layout Enumerate
'Add Customer', 'Add Vendor' links on invoices/orders/quotes/POS screens.
 These links appear only if allowed by access control settings.
 
\end_layout

\begin_layout Enumerate
Enhanced assemblies.
 You can get a report of all stock-assembly actions.
 Warehouses are correctly updated with any assemblies made and components
 used.
 
\end_layout

\begin_layout Enumerate
Enhanced bank reconciliation.
 
\end_layout

\begin_layout Enumerate
Added back the '
\series bold
Shipping–Transfer
\series default
' function from SQL-Ledger 2.6.
 
\end_layout

\begin_layout Enumerate
LedgerDoctor script which identifies potential problems with data entry.
 
\end_layout

\begin_layout Enumerate
CSV data import.
 (invoices, transactions, general ledger, orders, customers, vendors, parts,
 chart).
 
\end_layout

\begin_layout Enumerate
Disabled incorrect item weight update from orders and invoices 
\end_layout

\begin_layout Enumerate
Parts group is mandatory if there is at least on group defined
\end_layout

\begin_layout Chapter
Setting up your business on SQL-Ledger
\end_layout

\begin_layout Standard
The next step after successful SQL-Ledger installation is to setup your
 initial business data.
 You need to do this before you can start making your day to day transactions.
\end_layout

\begin_layout Section
Creating your first dataset
\end_layout

\begin_layout Standard
You need to create a dataset in SQL-Ledger before you start using it to
 manage your business accounts.
 Behind the scenes each dataset is a PostgreSQL database with tables, indexes
 and some seed data like chart of accounts.
 
\end_layout

\begin_layout Standard
To create a new data set, you need to login to the admin interface.
 The admin interface is accessible through the following URL:
\end_layout

\begin_layout Itemize
http://your-server-ip-address/sql-ledger/admin.pl
\end_layout

\begin_layout Standard
You will be asked for a password.
 The default password is blank.
 Once you login for the first time, you are asked to set the password to
 something secure.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename admin1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Once you have logged-in to the admin interface, you will see the existing
 datasets if any.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename admin2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
To add your new dataset, you click 'Add Dataset' button and following page
 is displayed.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename admin3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
On this page you need to enter your database credentials.
 As a best practice you should create a PostgreSQL user for use with SQL-Ledger.
 By default this user is assumed to be 'sql-ledger'.
 In Linux Debian you create an ’sql-ledger’ user by entering the following
 the command 'su postgres -c "createuser -d -S -R sql-ledger"'.
 
\end_layout

\begin_layout Standard
If you are not sure how to create this user on your own system, you can
 go ahead with the default PostgreSQL superuser which is normally 'postgres'
 instead of 'sql-ledger' and click 'Continue'
\end_layout

\begin_layout Standard
All the other defaults on the above page will work in most cases.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename admin4.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Once the above page is displayed, you can enter your company name, a name
 for your dataset (which is in lowercase without any spaces or special character
s), the character encoding and one of the default chart of accounts.
 Once you have made all the selections, click 'Continue' to create your
 dataset.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename admin5.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Your dataset should now be created and added to the list of existing datasets.
\end_layout

\begin_layout Section
Creating users and roles
\end_layout

\begin_layout Standard
A default admin account with name 'admin@datasetname' is created with each
 new dataset.
 Its password is set to blank, so be sure to change it something secure
 on your first login.
 Now you need to login and create some new users as well as set their access
 privileges using roles.
\end_layout

\begin_layout Standard
To login to your newly created dataset visit http://your-server-ip-address/sql-l
edger/login.pl and login as 'admin@datasetname'
\end_layout

\begin_layout Subsection
Roles
\end_layout

\begin_layout Standard
Roles allow you to define which menu option is available to each user.
 You can group your users into roles and then define the access privileges
 for the roles.
 Click the menu 
\series bold
'System--Roles'
\series default
 to display existing roles, change existing ones or add a new one.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename role1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
To add a new role, click 'Add Role' and check/un-check the menus under 'Access
 Control' to allow or disallow that menu to the role.
 If you un-check for example ’AR’, all features pertaining to ’AR’, like
 ’Add Transaction’ , ’Sales.
 Invoice’ etc.
 will also be disabled.
 Once you have defined the access privileges, click 'Save' to add the role.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename role2.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Users / Employees
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuhr.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
One you have defined the roles, it is time to define the actual users.
 For this you click on 
\series bold
'HR--Employees--Add Employee
\series default
'.
 Here you fill all the information for the user.
 
\end_layout

\begin_layout Itemize
In the 'Role' field, select the appropriate role for this user.
 
\end_layout

\begin_layout Itemize
In the login name field, type the login name which should be preferably
 in lower case without '@' sign and without other special characters.
\end_layout

\begin_layout Itemize
The 'Sales' check-box is there to mark whether this user is to appear as
 a salespersons on your quotations, orders and invoices or not.
\end_layout

\begin_layout Standard
On the screen you can add all your SQL-Ledger users as well as other employees
 data.
 If you do not want to allow a particular employee to login to SQL-Ledger,
 just omit the login and password.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename user1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
To get list of existing employees, you use 
\series bold
'HR--Employees--Reports'
\series default
 menu.
 A search screen is displayed where you can select which information you
 need to display.
 To display the list click the 'Continue' button.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename emp1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Now all employees and/or users are displayed.
 You can click on the name of the user to open the detail of the user or
 employee and change it as required.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename emp2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Once you have created a user, he or she can login with his or her username.
 The username is of the format 'login@datasetname'.
 For example if you created a user with login 'armaghan' for a dataset named
 'rel3' then the user needs to login with 'armaghan@rel3' as his or her
 username.
 If you use SQL-Ledger in a multi-company environment and a user has access
 to various different datasets, by entering only the username without the
 ’@’ and the name of the dataset, you will get a list of all the different
 datasets (companies) available to choose from.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename user3.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
When you or your user has successfully logged-in to the SQL-Ledger and the
 following welcome screen is displayed.
 The menu is on the left.
 Only those menu options are visible to the user which have been allowed
 by the assigned role to that user (see 2.2 above).
 If no role has been created then user will have access to all the menus.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename user4.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Defaults
\end_layout

\begin_layout Standard
The 
\series bold
'System--Defaults'
\series default
 menu allows you to setup your company, address and related information
 in SQL-Ledger.
 Document numbering is also controlled by system defaults.
 We setup defaults for document numbers as shown on the following screen
 shot.
 You can change these to your liking or organizational needs.
 You can also use various variables in the system default number fields
 like <%dd%> for day, <%mm%> for month, <%yy%> for year etc
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename defaults.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Customers
\end_layout

\begin_layout Standard
The customers menu allows you to add new customers and change or delete
 existing customers.
 You need to add at least one customer before creating a quotation, sales
 order, sales invoice or AR transaction.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menucustomers.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Use 
\series bold
'Customers--Add Customer'
\series default
 to add new customers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename customer1.png

\end_inset


\end_layout

\begin_layout Standard
To make changes to existing customers, first you list them using 
\series bold
'Customers--Customers Search
\series default
'.
 You can leave this search form blank and click 'Continue' to get all customers
 or you can specify customer name, phone or any other information to get
 a specific customer.
 If there are more than one matching customers, all those will be listed.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename customer-search1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
When you click the customer name in this list, that particular customer
 record will be shown for editing.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename customer-search2.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Vendors
\end_layout

\begin_layout Standard
The vendors menu allows you to add new vendors and change or delete existing
 vendors.
 You need to add at least one vendor before creating a request for quotation
 (RFQ), purchase order, vendor invoice or AP transaction.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuvendors.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Use 
\series bold
'Vendors--Add Vendor'
\series default
 to add new vendors.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vendor1.png

\end_inset


\end_layout

\begin_layout Standard
To make changes to existing vendors, first you list them using 
\series bold
'Vendors--Vendors Search
\series default
'.
 You can leave this search form blank and click 'Continue' to get all vendors
 or you can specify vendor name, phone or any other information to get a
 specific customer.
 If there are more than one matching vendors, all those will be listed.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vendor-search1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vendor-search2.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Type of Business
\end_layout

\begin_layout Standard
You can group your customers using the 
\series bold
'System--Type of business'
\series default
 menu.
 You can setup default discount percentage for that group of customers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename typeofbiz1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename typeofbiz2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
One you have defined types of business, you select a particular one when
 you are adding or editing your customer as shown below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename typeofbiz3.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Departments
\end_layout

\begin_layout Standard
Departments are optional and can be used to classify transactions according
 to a department code.
\end_layout

\begin_layout Subsection
Managing Departments
\end_layout

\begin_layout Standard
Departments can be added, changed or deleted using 
\series bold
'System--Departments
\series default
' menu.
 When managing departments, following points are important:
\end_layout

\begin_layout Enumerate
Departments lookup does not appear on transaction forms unless you define
 at least one department.
\end_layout

\begin_layout Enumerate
SQL-Ledger departments can be mapped to the various departments (sales,
 purchase etc.), branches (London, Oxford etc.) or product divisions (Product
 1, Product2 etc.) within your organization.
\end_layout

\begin_layout Enumerate
Departments can be marked as 'Cost Center' or 'Profit Center'.
 Cost center departments appear only in purchasing module.
 Profit center departments appear both in purchasing and sales modules.
\end_layout

\begin_layout Enumerate
You can also change 'Department' to anything you like (eg.Branch) using the
 SQL-Ledger language customization feature.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department2.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Default Department
\end_layout

\begin_layout Standard
You can define a default department for a particular user using 
\series bold
'HR--Employees'
\series default
 menu.
 You can also restrict the user to view and make transactions to his department
 only by setting his role to User.
 Users with role Administrator, Manager, Supervisor always have access to
 all departments.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department3.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Using Departments
\end_layout

\begin_layout Standard
Once departments are defined you can specify them in your invoices, orders,
 quotations and other transactions.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department4.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Reports
\end_layout

\begin_layout Standard
Reports allow you to view all or department specific transactions.
 For example you can filter AR Transactions report '
\series bold
AR--Reports--Transactions
\series default
' by specifying a particular department on search screen.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department5.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
'
\series bold
Reports--Income Statement
\series default
' and '
\series bold
Reports--Balance sheet
\series default
' can also be compared and displayed by department.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department6.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard

\series bold
'Reports--Department Income Statement'
\series default
 report shows income statement for individual departments in columner form.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department7.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department8.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Projects
\end_layout

\begin_layout Standard
Projects are optional and can be used for following things:
\end_layout

\begin_layout Enumerate
Track income and expenses to specific projects using invoices and general
 ledger transactions.
 
\end_layout

\begin_layout Enumerate
Enter time card data.
 
\end_layout

\begin_layout Standard
Projects only appear on transaction forms if you have created at least one
 project.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuprojects.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Managing Projects
\end_layout

\begin_layout Standard
You can add or change projects through Projects menu.
 Click on 
\series bold
Projects--Add Project
\series default
 to add a new project.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename project1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
To change an existing project, first you need to display a list of your
 existing projects.
 For this you use the 
\series bold
'Projects--Reports--Projects'
\series default
 menu and the following screen is displayed where you can specify some condition
s to select the projects of your interest.
 To view all projects just click the 'Continue' button.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename project2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Once projects are displayed as show below, you can click on the project
 number to open the project and make required changes.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename project3.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Using Projects
\end_layout

\begin_layout Standard
Once you have defined projects, you can use them in quotations, orders,
 invoices and general ledger entries.
 In quotations, orders and invoices the project drop-down list only appears
 on the extended detail lines.
 To display the extended detail line and the project drop-down list in quotation
s, orders and invoices, you first need to check the check-box next to the
 description of each line item.
 If you check the check-box in the heading as shown here below, extended
 detail is show for all the line items.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename project2.jpg

\end_inset


\end_layout

\begin_layout Subsection
Project Reports
\end_layout

\begin_layout Standard
The 
\series bold
'Projects--Reports--Transactions'
\series default
 report will show you a summary report similar to the '
\series bold
Reports--Trial Balance
\series default
' report with summary of all transactions for the the selected project.
 Before displaying the report you can specify a date range as well as a
 department for the report.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename project4.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Once you display the report, you will see all accounts showing sum of all
 transactions for that particular project.
 This report is similar to the trial balance report but shows balances for
 a particular project only.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename project5.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
You can click on the account number to get the list of individual project
 transactions for that account.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename project6.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Chart of Accounts
\end_layout

\begin_layout Standard
A chart of accounts is required before you can start recording any accounting
 transaction.
 When you create your company dataset in SQL-Ledger you have to select one
 of the provided samples of chart of accounts.
 Later on you can modify the initial chart of accounts according to your
 business needs.
 
\end_layout

\begin_layout Standard
The
\series bold
 'System--Chart of Accounts'
\series default
 menu is used to manage the chart of accounts.
 Here you can add new accounts, change existing ones or delete the unwanted
 ones from sample chart of accounts which have not been used in any transaction.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuchart.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
The 
\series bold
'System--Chart of Accounts--List Accounts'
\series default
 shows the existing chart of account.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename chart1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
You can click on the account number to open the account in detail form where
 you can make changes to the account.
 You can safely change the account number at any time to reorganize your
 accounts.
 All transactions booked onto the account will remain linked to it and simply
 change
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename chart2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
All accounts in SQL-Ledger must be defined as either ’Heading’ or ’Account’.
 The ’Heading’ accounts help you divide your various accounts into groups.
 ’Heading’ accounts are mainly for organizational purposes and commonly
 used to subtotal groups of accounts in the income statement or balance
 sheet.
 
\end_layout

\begin_layout Standard
The ’Account Type’ sets the accounting purpose for each account.
 Accounts marked as ’Contra’ accounts are shown with reversed amounts in
 the trial balance.
 Summary accounts are used to record transactions for accounts receivable,
 accounts payable and inventory.
 If you mark an account as a summary account, it will be included in the
 selection drop-down menus available when you process accounts receivable
 and accounts payable transactions, or when you set up new inventory.
 
\end_layout

\begin_layout Standard
When you mark an account to be included in the drop-down menus ’AR’, ’AP’
 or ’Tracking Items’ (parts, assemblies, direct labor) and ’Non-tracking
 Items’ (services), it will be included in the related modules.
 For example marking ’Lineitem’ will make the account available as an income
 or expense account in all AR and AP transactions.
 Marking ’Payment’ will include it for recording the payment of such transaction
s.
 
\end_layout

\begin_layout Standard
Accounts marked to be included for ’Income’, ’COGS’ / ’Expense’ or ’Tax’
 under ’Tracking Items’ and ’Non-tracking Items’ will become available in
 the corresponding drop-down menus when you set up new goods and services
 under ’Goods & Services–Add...’.
 In SQL-Ledger each tax account has a tax level which can be defined in
 ’System–Taxes’ for automatic calculation.
 Tax accounts can also be used for other purposes like commission fees.
 
\end_layout

\begin_layout Standard
There are six default accounts in SQL-Ledger.
 Income, expense, inventory, foreign exchange gain, foreign exchange loss
 and the cash over/short account.
 You will find them in ’System–Defaults’ and once they have been set up
 accordingly they cannot be deleted.
 You must also have at least one account for accounts receivable and one
 for accounts payable, in order for SQL-Ledger to be able to keep track
 of any outstanding amounts in the balance sheet.
\end_layout

\begin_layout Section
GIFI
\end_layout

\begin_layout Standard
GIFI stands for General Index for Financial Information.
 GIFI codes can be created and attached to accounts in chart of accounts.
 You can add or change GIFI codes just like standard chart of accounts.
 Once GIFI setup is complete, you can view accounting reports by standard
 accounts or GIFI accounts.
\end_layout

\begin_layout Section
Templates
\end_layout

\begin_layout Standard
Print forms for invoices, orders, quotations and financial reports have
 been defined as templates.
 This makes it easy to customize these forms and reports according to your
 requirements.
 All these templates can be accessed through the 
\series bold
'System'
\series default
 menu.
 There are three type of templates:
\end_layout

\begin_layout Subsection
HTML Templates
\end_layout

\begin_layout Standard
HTML templates are easier to modify because of the wide spread knowledge
 of html.
 Only basic HTML knowledge is required to edit HTML templates.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menutemplates.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates3a.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates3b.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Latex Templates
\end_layout

\begin_layout Standard
LateX templates are bit more complex to understand and modify but offer
 complete control over printed invoice, order or quotation forms.
 See below for basic introduction to LateX.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menutemplates2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates4.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates5.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Text Templates
\end_layout

\begin_layout Standard
Text templates are used only for Point-of-Sale receipts printing.
 These templates allow you to print on 40 character receipt printers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menutemplates3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates6.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates7.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Editing Templates
\end_layout

\begin_layout Standard
Templates can be edited directly through SQL-Ledger.
 When you click on a template, it is displayed with an 'Edit' button at
 the end of the template.
 Clicking the 'Edit' button will open the template in a text box where it
 can be edited and saved.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates2.png

\end_inset


\end_layout

\begin_layout Standard
Here this template is opened for editing.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename templates3.png

\end_inset


\end_layout

\begin_layout Subsection
Template Variables
\end_layout

\begin_layout Standard
SQL-Ledger replaces actual data into templates by using variables which
 we call template variables.
 Template variables are enclosed within <% and %>.
\end_layout

\begin_layout Standard
Here are some template variables to give you an idea.
 The best way to view all these template variables and understand their
 usage is by going through existing templates.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

<%name%>
\end_layout

\begin_layout Plain Layout

<%address1%>
\end_layout

\begin_layout Plain Layout

<%address2%>
\end_layout

\begin_layout Plain Layout

<%city%>
\end_layout

\begin_layout Plain Layout

<%state%>
\end_layout

\begin_layout Plain Layout

<%zipcode%>
\end_layout

\begin_layout Plain Layout

<%country%>
\end_layout

\begin_layout Plain Layout

<%contact%>
\end_layout

\begin_layout Plain Layout

<%invnumber%>
\end_layout

\begin_layout Plain Layout

<%invdate%>
\end_layout

\begin_layout Plain Layout

<%duedate%>
\end_layout

\begin_layout Plain Layout

<%ordnumber%>
\end_layout

\begin_layout Plain Layout

<%employee%>
\end_layout

\begin_layout Plain Layout

<%shippingpoint%>
\end_layout

\begin_layout Plain Layout

<%shipvia%>
\end_layout

\begin_layout Plain Layout

<%runningnumber%>
\end_layout

\begin_layout Plain Layout

<%number%>
\end_layout

\begin_layout Plain Layout

<%description%>
\end_layout

\begin_layout Plain Layout

<%deliverydate%>
\end_layout

\begin_layout Plain Layout

<%qty%>
\end_layout

\begin_layout Plain Layout

<%unit%>
\end_layout

\begin_layout Plain Layout

<%sellprice%>
\end_layout

\begin_layout Plain Layout

<%discountrate%>
\end_layout

\begin_layout Plain Layout

<%linetotal%>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Template control commands
\end_layout

\begin_layout Standard
The template processing engine in SQL-Ledger allows simple if statement
 and loops.
 Examples of these are described below:
\end_layout

\begin_layout Subsubsection
'if' is used to print a column data conditionally
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

<%if contact%>
\end_layout

\begin_layout Plain Layout

  <br><%contact%>
\end_layout

\begin_layout Plain Layout

  <br>
\end_layout

\begin_layout Plain Layout

<%end contact%>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<%if taxincluded%>
\end_layout

\begin_layout Plain Layout

   <th colspan=7 align=right>Total</th>
\end_layout

\begin_layout Plain Layout

   <td colspan=2 align=right><%invtotal%></td>
\end_layout

\begin_layout Plain Layout

<%end taxincluded%>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<%if not taxincluded%>
\end_layout

\begin_layout Plain Layout

   <th colspan=7 align=right>Subtotal</th>
\end_layout

\begin_layout Plain Layout

   <td colspan=2 align=right><%subtotal%></td>
\end_layout

\begin_layout Plain Layout

<%end taxincluded%>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<%if paid%>
\end_layout

\begin_layout Plain Layout

   <tr>
\end_layout

\begin_layout Plain Layout

      <th colspan=7 align=right>Paid</th>
\end_layout

\begin_layout Plain Layout

      <td colspan=2 align=right>- <%paid%></td>
\end_layout

\begin_layout Plain Layout

   </tr>
\end_layout

\begin_layout Plain Layout

<%end paid%>
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
'for' loop to print all lines on an invoice
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

<%foreach number%>
\end_layout

\begin_layout Plain Layout

        <tr valign=top>
\end_layout

\begin_layout Plain Layout

          <td align=right><%runningnumber%>.</td>
\end_layout

\begin_layout Plain Layout

          <td><%number%></td>
\end_layout

\begin_layout Plain Layout

          <td><%description%></td>
\end_layout

\begin_layout Plain Layout

          <td><%deliverydate%></td>
\end_layout

\begin_layout Plain Layout

          <td align=right><%qty%></td>
\end_layout

\begin_layout Plain Layout

          <td><%unit%></td>
\end_layout

\begin_layout Plain Layout

          <td align=right><%sellprice%></td>
\end_layout

\begin_layout Plain Layout

          <td align=right><%discountrate%></td>
\end_layout

\begin_layout Plain Layout

          <td align=right><%linetotal%></td>
\end_layout

\begin_layout Plain Layout

        </tr>
\end_layout

\begin_layout Plain Layout

<%end number%>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<%foreach tax%>
\end_layout

\begin_layout Plain Layout

  <tr>
\end_layout

\begin_layout Plain Layout

     <th colspan=7 align=right><%taxdescription%> on <%taxbase%> @ <%taxrate%>
 %</th>
\end_layout

\begin_layout Plain Layout

     <td colspan=2 align=right><%tax%></td>
\end_layout

\begin_layout Plain Layout

  </tr>
\end_layout

\begin_layout Plain Layout

<%end tax%>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
An Introduction to Latex
\end_layout

\begin_layout Standard
Latex is a complete collection of software tools to create high quaility
 print documents.
 Latex templates are used in SQL-Ledger to create high quality print forms
 like invoices, purchase orders etc.
\end_layout

\begin_layout Standard
Latex is included with most Linux distributions.
 In the Red Hat distribution Latex can be installed with the command 'yum
 install tetex'.
\end_layout

\begin_layout Standard
In the Debian distribution it can be installed with 'apt-get install latex'.
\end_layout

\begin_layout Standard
For FreeBSD, you can install the teTex port from /usr/ports/print/teTeX.
\end_layout

\begin_layout Standard
Latex might seem overwhelming to a newcomer but it is really a simple toolkit
 to use for customizing the SQL-Ledger templates.
 In this very short introduction of Latex, we shall go through the basic
 document format and its use in SQL-Ledger.
\end_layout

\begin_layout Standard
Here is 'Hello world!' in latex.
\end_layout

\begin_layout Subsubsection
Create a text file (hello.tex) in your home folder with following text:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout


\backslash
documentclass[a4paper,11pt]{article}
\end_layout

\begin_layout Plain Layout


\backslash
begin{document}
\end_layout

\begin_layout Plain Layout

Hello world!
\end_layout

\begin_layout Plain Layout


\backslash
end{document}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Compile this tex file into dvi file and use xdvi to view it:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

latex hello.tex
\end_layout

\begin_layout Plain Layout

xdvi hello.dvi
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
You can also convert it to pdf:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

pdflatex hello.tex
\end_layout

\begin_layout Plain Layout

xpdf hello.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Structure of a Latex Document
\end_layout

\begin_layout Standard
Latex commands start with a backslash (
\backslash
).
 Parameters can follow the command.
 Optional parameters are enclosed in [] while mandatory ones are enclosed
 in {}.
 {} can also be used to terminated a command mixed within some text (to
 make it easier for the compiler to understand the command).
 Special characters in latex (#, $, %, ^, &, _, {, }, ~) are escaped with
 
\backslash
 except for the 
\backslash
 character itself (because is used to break a line).
 To use literal backslash (
\backslash
) use can use special command $
\backslash
backslash$.
\end_layout

\begin_layout Standard
Single line comments start with % while multi-line comments can be enclosed
 between 
\backslash
begin{comment} and 
\backslash
end{comment} structure.
\end_layout

\begin_layout Standard
Every latex document starts with 
\backslash
documentclass with parameters ([a4paper,11pt]{article}) following it.
\end_layout

\begin_layout Section
Goods & Services
\end_layout

\begin_layout Standard
All business sell some goods and services to generate revenue.
 You need to define the goods and services related to your business before
 you can start creating invoices, orders or quotations.
 Goods and services have been defined into following entities:
\end_layout

\begin_layout Enumerate
Parts are something which you keep in the inventory and want to track their
 on-hand quantity.
\end_layout

\begin_layout Enumerate
Services are something which you provide to your customers or buy from vendors.
 Services are not 'stored' somewhere and you do not track their onhand quantity.
\end_layout

\begin_layout Enumerate
Assemblies are made up from parts, services and labor/overhead.
 This feature is used by manufacturing companies.
 When you sell an assembly all its associated parts are removed from inventory.
 COGS for parts and cost of services is recorded.
 Important note: Assemblies can only be sold.
\end_layout

\begin_layout Enumerate
Labor/overhead can be used to allocate the cost of labor or manufacturing
 overhead to the assemblies.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menugoods.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Parts
\end_layout

\begin_layout Standard
Parts are tangible items you keep in your stock.
 You purchase them from your vendors and sell them to your customers for
 profit.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename parts1.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Services
\end_layout

\begin_layout Standard
Services are intangible items which you sell or purchase.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename parts2.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Labor/Overhead
\end_layout

\begin_layout Standard
Labor/overhead items are used to allocate labor/overhead charges to an assembly
 in a manufacturing business.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename parts3.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Assemblies
\end_layout

\begin_layout Standard
An assembly is composed of components which are individual parts in the
 inventory or other sub-assemblies.
 Assemblies in SQL-Ledger allow you to do manage your manufacturing process.
\end_layout

\begin_layout Standard
Work flow for using assemblies:
\end_layout

\begin_layout Enumerate
Define assemblies.
 '
\series bold
Goods & Services--Add Assembly
\series default
'.
\end_layout

\begin_layout Enumerate
Build assemblies.
 
\series bold
'Goods & Services--Stock Assembly
\series default
'.
 Individual parts are removed and assemblies are added to the stock inventory.
\end_layout

\begin_layout Enumerate
Sell assembly items like any other item.
\end_layout

\begin_layout Standard
Please note that you cannot buy parts defined as assemblies.
\end_layout

\begin_layout Subsection
Define assemblies
\end_layout

\begin_layout Standard
As assembly is just like any other inventory item in your SQL-Ledger with
 the additional information about its components.
 You define new assemblies using 
\series bold
'Goods and Service -- Add Assembly
\series default
'.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename parts4.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Stock assemblies
\end_layout

\begin_layout Standard
This option reduces the quantities of the components and increases the on-hand
 quantity of the assemblies.
 COGS is not recorded at this point.
\end_layout

\begin_layout Standard
COGS for the assembly is recorded from individual components when you sell
 the assembly.
 FIFO allocation also occurs at the time of sale.
 (Rows are inserted in invoice table for component parts with assemblyitem=TRUE)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assembly1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assembly2.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Reports
\end_layout

\begin_layout Standard
The 
\series bold
'Goods and Services--Reports--Stock Assembly'
\series default
 menu gives you a list of your Stock Assembly actions.
 This report lists the parts taken out of assembly as well as assemblies
 built.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename stock1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Following is a summary report of the 'Stock Assembly' action.
 It shows each action with its reference and date and other information.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename stock2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Following is a detail report of the 'Stock Assembly' action.
 It shows each assembly and its components which have been updated through
 the 'Stock Assembly' action.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename stock3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
The
\series bold
 'Goods and Services--Reports--Assemblies'
\series default
 menu gives you list of all or selected assemblies with their components.
 You can narrow down your assemblies list by specifying search criteria.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assembly3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Once you click the 'Continue' button above the following report is displayed.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assembly4.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
The
\series bold
 'Goods and Services--Components'
\series default
 menu gives you a list order by part number and the assembly in which it
 is used.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename assembly5.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Work Order You can print work order for a sales orders.
 Work order lists all component parts required to fulfil a given order of
 assembly items.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename workorder1.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Section
Labor/Overhead
\end_layout

\begin_layout Standard
Labor/overhead items are used to record labor/overhead of a manufacturing
 business in assemblies.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename parts3.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Groups
\end_layout

\begin_layout Standard
Groups are used to group togather the parts and services.
 You can filter parts and services in the various '
\series bold
Goods & Services--Reports
\series default
' reports by selecting a group on search screens.
\end_layout

\begin_layout Standard
Groups have another useful functionality.
 When you check the POS button box during group add or change, they appear
 as buttons on POS (point-of-sale) screens making it easier to select items
 within each group.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename group1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename group2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Click on any group name in the list above and it will be opened for any
 change.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename group3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
You can also define subgroups.
 To define a subgroup you type of the name of the group followed by a ':'
 and then the name of the subgroup.
 You can filter certain reports with group or its subgroup.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename group4.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Pricegroups
\end_layout

\begin_layout Standard
SQL-Ledger has very flexible pricing mechanisms.
 For example:
\end_layout

\begin_layout Enumerate
You can define customer specific prices for each part.
 
\end_layout

\begin_layout Enumerate
You can define quantity breaks.
 (If someone buys 10 units instead of 1, he/she can automatically gets lower
 price.) 
\end_layout

\begin_layout Enumerate
And you can specify start and end dates to offer a special price during,
 for example, Christmas season.
 
\end_layout

\begin_layout Standard
Price groups take this concept further and allow you to define 'groups'
 of special prices.
 Let us say you sell to distributor, dealer and end-user.
 Each of these groups of customers gets tiered discount/price.
\end_layout

\begin_layout Standard
There are three steps to use price groups:
\end_layout

\begin_layout Enumerate
Create three price groups; distributor, dealer and end-user.
 (
\series bold
'Goods & Services--Add Pricegroup
\series default
')
\end_layout

\begin_layout Enumerate
Define item prices for these price groups.
 To do this, open the item for editing and select the price group and set
 the price according to the price group tier.
 Leave the customer column blank.
 Repeat this for all items.
 (Clicking 'Update' will allow you to set prices for multiple pricegroups
 for a single item.) 
\end_layout

\begin_layout Enumerate
Open the customer record for editing and set the applicable price group
 for that customer.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pricegroup.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Goods & Services Reports
\end_layout

\begin_layout Standard
Here we explain all reports under 
\series bold
'Goods & Services--Reports'
\series default
 menu briefly.
\end_layout

\begin_layout Subsection
All Items
\end_layout

\begin_layout Standard
This report can be used to view a list of all items which include parts,
 services, labor/overhead and assemblies.
 You can optionally select to view invoices or orders which have been created
 for each item.
\end_layout

\begin_layout Subsection
Parts
\end_layout

\begin_layout Standard
This report is similar to the all items report above but only shows parts
 or tangible items for which you track on-hand quantity in your business.
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Standard
This report will show you what you need to buy based upon following factors:
\end_layout

\begin_layout Standard
On-hand quantity
\end_layout

\begin_layout Standard
Sales orders
\end_layout

\begin_layout Standard
Purchase orders
\end_layout

\begin_layout Subsection
Services
\end_layout

\begin_layout Standard
This report is similar to all items report above but only shows services.
\end_layout

\begin_layout Subsection
Labor/Overhead
\end_layout

\begin_layout Standard
This report is similar to all items report but only shows labor/overhead
 items.
\end_layout

\begin_layout Subsection
Groups
\end_layout

\begin_layout Standard
This report will show you all the groups you have defined for your various
 goods and services.
\end_layout

\begin_layout Subsection
Pricegroups
\end_layout

\begin_layout Standard
This report will show you all the price group you have defined.
\end_layout

\begin_layout Subsection
Assemblies
\end_layout

\begin_layout Standard
This report will show you all the assemblies you have defined.
\end_layout

\begin_layout Subsection
Components
\end_layout

\begin_layout Standard
This report will show you all the components which have been used in your
 assemblies.
\end_layout

\begin_layout Subsection
Stock Assembly
\end_layout

\begin_layout Standard
This report will show you the log of stock assembly actions (assembly production
).
\end_layout

\begin_layout Section
Warehouses
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuwarehouses.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Warehouses are optional and can be used to manage your inventory at more
 than one physical place.
\end_layout

\begin_layout Standard
Important: Once you have defined warehouses, these are no longer optional
 and you cannot save a transaction (invoice or transfer) without specifying
 a warehouse.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename warehouse1.jpg

\end_inset


\end_layout

\begin_layout Subsection
Adding warehouses
\end_layout

\begin_layout Standard
You can add, change or delete warehouses through '
\series bold
System–Warehouses
\series default
' option.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename warehouse1.jpg

\end_inset


\end_layout

\begin_layout Subsection
Default warehouse
\end_layout

\begin_layout Standard
You can define a default warehouse for users through the administrative
 interface ('
\series bold
HR--Employees
\series default
').
 You can restrict a user to view and make transactions to only one warehouse
 by setting his role to User.
 Users with role Administrator, Manager, Supervisor always have access to
 all warehouses.
 For more information on how to create different ’roles’ see 2.2.1 above.
\end_layout

\begin_layout Standard
TODO: Default roles from 2.8 are not in 3.0.
 We need to check / change code and text above.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename department3.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Using warehouses
\end_layout

\begin_layout Standard
The warehouse drop down menu is enabled on relevant transactions forms once
 you define at least one warehouse.
 When you purchase goods, quantity is added to the specified warehouse.
 When you sell goods, quantity is subtracted from the specified warehouse.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename warehouse2.jpg

\end_inset


\end_layout

\begin_layout Subsection
Warehouse transfers
\end_layout

\begin_layout Standard
You can move inventory between warehouses by using the '
\series bold
Warehouses
\size small
--
\size default
Add Transfer
\series default
' menu option.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trf1.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Transfer Reports
\end_layout

\begin_layout Standard
The '
\series bold
Warehouses--Reports--Transfers
\series default
' report shows a list of all transfers.
 On the search screen you can select conditions to see only transactions
 of your interest or just click 'Continue' to display all transactions.
\end_layout

\begin_layout Standard
'Summary' lists transfer transactions and 'Detail' lists all items in each
 transfer transaction.
 You can click on the transfer number hyper link to edit the transfer.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trf4.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trf3.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Warehouse Onhand Report
\end_layout

\begin_layout Standard
The 
\series bold
'Warehouses--Reports--Onhand'
\series default
 report gives you inventory on-hand for all warehouses or for a particular
 warehouse.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trf4.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
As you can see the report shows the onhand quantity of selected items at
 each warehouse.
 This report can be sorted on item number so that you can quickly see the
 on-hand quantity of a particular item at each warehouse.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trf5.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
You can click on any item number to display the activity for that item as
 shown below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trf6.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Transfers delivered
\end_layout

\begin_layout Standard
Some companies also need to track the in-transit goods between warehouse
 transfers.
 The delivery date is sometimes different from the transfer date.
 When you login to SQL-Ledger, you will see the number of transfers which
 have been sent to your default warehouse but not 'received' by you yet.
 
\end_layout

\begin_layout Standard
TODO: This function needs to be ported to rel3
\end_layout

\begin_layout Standard
To 'receive' the transfers, click the 
\series bold
'Warehouses--Reports--Deliveries'
\series default
 menu option, specify criteria and click 'Continue' to display the transfers
 pending to be received.
 Then you specify the dates when the goods were delivered at 'your' warehouse
 and click 'Save Delivered'.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename warehouse_pending2.jpg

\end_inset


\end_layout

\begin_layout Subsection
Other Reports
\end_layout

\begin_layout Enumerate
The 
\series bold
'Goods & Services--Reports--Parts'
\series default
 report provides a summary of your on-hand quantity at selected or all warehouse
s.
 Click the 'Warehouse' check box to display the on-hand quantities by warehouse.
\end_layout

\begin_layout Enumerate

\series bold
'Warehouses--Reports--Activity'
\series default
 gives you a report of all activity of a particular item or all items.
 Select 'warehouse' to see the activity in a particular warehouse.
 Activity report shows all the activity from purchase invoices, sales invoices,
 shipped purchase orders, shipped sales orders and transfers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename warehouse3.jpg

\end_inset


\end_layout

\begin_layout Subsection
Enabling multiple warehouses for old dataset
\end_layout

\begin_layout Standard
If you have upgraded your SQL-Ledger installation with our enhanced version,
 you need to run few queries to bring your old data in sync with the new
 warehouses structure.
\end_layout

\begin_layout Standard
Assemblies are a special case.
 In the standard SQL-Ledger, a 'Stock Assembly' action does not create any
 transaction/log and directly updates the on-hand quantities in the parts
 table.
 If you are using assemblies, you will almost always need to adjust the
 components and assemblies quantities after running these queries.
 See step 4 below.
\end_layout

\begin_layout Standard
Important: Make sure you have a current backup before doing this.
\end_layout

\begin_layout Standard
TODO: Copy queries and other text here.
 See how code can be formatted properly.
 Suggest to use ’System–Maintainance–Monitor’ to insert queries.
 
\end_layout

\begin_layout Section
Languages
\end_layout

\begin_layout Standard
When you add a new language to your dataset, SQL-Ledger will add a complete
 alternate set of templates and simultaneously open up the possibility for
 you to translate the descriptions of your parts, services, groups, chart
 of accounts and projects.
 The SQL-Ledger language feature can be used for for main purposes:
\end_layout

\begin_layout Enumerate
You can define alternate descriptions, in a foreign language, for parts,
 services and groups ('Goods & Services--Translations').
 This way you can send, for example, invoices to your customers with the
 description of your goods and services in their native language.
 
\end_layout

\begin_layout Enumerate
You can also translate the complete alternate set of templates which is
 created when you add a new language (see 2.11 above).
 This way you can send, for example, invoices to your customers where also
 the standard template content is translated into a foreign language This
 can be used in combination with the alternate descriptions for parts, services
 and groups mentioned above, or on its own to define a particular set of
 documents for a particular customer or market segment.
\end_layout

\begin_layout Enumerate
You can translate your chart of accounts if you want to be able to print
 your ’Balance Sheet’ and/or ’Income Statement’ in a foreign language (’
\series bold
System--Chart of Accounts--Translations
\series default
’).
 
\end_layout

\begin_layout Enumerate
You can translate your chart of accounts if you want to be able to print
 your ’Balance Sheet’ and/or ’Income Statement’ in a foreign language (’
\series bold
System--Chart of Accounts--Translations
\series default
’).
\end_layout

\begin_layout Standard
To define a new language, use the 
\series bold
'System--Language'
\series default
 menu.
 An existing list of languages (if any) will be displayed with the 'Add
 Language' button at the bottom of the report.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename language.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename language.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Once you have defined a new language, you can see it on a drop-down in the
 invoice, order and quotation print options area.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename language-print.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Translations
\end_layout

\begin_layout Standard
Once you have defined a language, you can add translations to certain things
 like:
\end_layout

\begin_layout Enumerate
Chart of accounts
\end_layout

\begin_layout Enumerate
All items
\end_layout

\begin_layout Enumerate
Groups
\end_layout

\begin_layout Enumerate
Projects
\end_layout

\begin_layout Standard
To add a translation, using 
\series bold
Translations
\series default
 sub-menu under the respective menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trans-chart.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trans-chart2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trans-chart3.png

\end_inset


\end_layout

\begin_layout Section
Taxes
\end_layout

\begin_layout Standard
Defining and using taxes in SQL-Ledger is a four step process:
\end_layout

\begin_layout Subsection
Define tax accounts in chart
\end_layout

\begin_layout Standard
You create (or edit) tax accounts in the chart of accounts using the '
\series bold
System--Accounts
\series default
' menu option.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tax0.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tax2.png
	scale 60

\end_inset


\end_layout

\begin_layout Subsection
Define tax percentages
\end_layout

\begin_layout Standard
You set percentages for each tax using the '
\series bold
System--Taxes
\series default
' menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tax1.png
	scale 60

\end_inset


\end_layout

\begin_layout Subsection
Mark Items/Services as taxable
\end_layout

\begin_layout Standard
You mark each part or service as taxable during the 'add' or 'edit' process.
 You do this using '
\series bold
Goods & Services
\series default
' menu option.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tax4.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Mark Customers/Vendors for applicable taxes
\end_layout

\begin_layout Standard
Tax will not be calculated for your customers or vendors unless you mark
 them as taxable.
 You do this using 
\series bold
'Customers'/'Vendors'
\series default
 menu option.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tax3.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Data import from other applications
\end_layout

\begin_layout Standard
Sometimes you need to import your sales data which was produced elsewhere
 into SQL-Ledger.
 You might have a web store where you download your daily sales in CSV format
 and want to import it into SQL-Ledger.
 Or you are just moving to SQL-Ledger from your legacy accounting software
 and want to move all existing data from your old software to SQL-Ledger.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename dataimport1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
In SQL-Ledger, we can import data for almost everything as shown in the
 image above.
 The following sections provide detailed information about the steps to
 take for importing data from CSV text files into SQL-Ledger.
\end_layout

\begin_layout Subsection
Sale invoices
\end_layout

\begin_layout Standard
Sales invoices can be imported from CSV text files.
\end_layout

\begin_layout Subsubsection
Format your data
\end_layout

\begin_layout Standard
Here is a sample of sales invoice import data.
 You prepare data in this format and save it in a text file.
 The last column AR is accounts receivable account number which is 1100
 in UK chart of accounts.
\end_layout

\begin_layout Standard
If your data contains invoices with more than one item, repeat the row with
 same invoice header information and change the item number and price informatio
n.
 SQL-Ledger will import all these rows as a single invoice.
 (See invoice number A100 above)
\end_layout

\begin_layout Standard
For list of additional data columns that can be imported see step 4.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout
\align left

invnumber,transdate,duedate,customernumber,curr,invoicedescription,partnumber,
\end_layout

\begin_layout Plain Layout
\align left

qty,sellprice,employeenumber,AR,department,warehouse 
\end_layout

\begin_layout Plain Layout
\align left

A100,10/12/2008,10/30/2008,AE001,GBP,Invoice description comes here,B001,10,102,
E-001,1100,HARDWARE,LONDON
\end_layout

\begin_layout Plain Layout
\align left

A100,10/12/2008,10/30/2008,AE001,GBP,Invoice description comes here,F003,6,69,E-
001,1100,HARDWARE,LONDON
\end_layout

\begin_layout Plain Layout
\align left

A101,10/12/2008,10/31/2008,CP002,GBP,Test description,F003,2,32,E-002,1100,SERVI
CES,PARIS
\end_layout

\begin_layout Plain Layout
\align left

A102,10/13/2008,11/1/2008,ER003,GBP,Sale of goods,T007,6,12,E-003,1100,SERVICES,
LONDON
\end_layout

\begin_layout Plain Layout
\align left

A103,10/14/2008,11/2/2008,SP007,GBP,Sale,K001,12,32,E-004,1100,HARDWARE,PARIS
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Upload and preview
\end_layout

\begin_layout Standard
Use the '
\series bold
Import--Sales Invoices
\series default
' menu option to upload your file into SQL-Ledger.
 You will be shown what will be imported before actual import is done.
 At this point you can check and uncheck the invoices to be imported.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_invoices.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Confirm data import
\end_layout

\begin_layout Standard
When you click the Import Sales Invoices button, invoices will be imported.
 You will be show which invoices were imported successfully.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_invoices2.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Additional data which can be imported
\end_layout

\begin_layout Standard
The sample CSV file provided above contains only the most commonly used
 columns.
 Here is the complete list.
\end_layout

\begin_layout Standard
transdate
\end_layout

\begin_layout Standard
invnumber
\end_layout

\begin_layout Standard
customernumber
\end_layout

\begin_layout Standard
curr
\end_layout

\begin_layout Standard
duedate
\end_layout

\begin_layout Standard
employeenumber
\end_layout

\begin_layout Standard
ordnumber
\end_layout

\begin_layout Standard
quonumber
\end_layout

\begin_layout Standard
datepaid
\end_layout

\begin_layout Standard
shippingpoint
\end_layout

\begin_layout Standard
shipvia
\end_layout

\begin_layout Standard
waybill
\end_layout

\begin_layout Standard
terms
\end_layout

\begin_layout Standard
notes
\end_layout

\begin_layout Standard
intnotes
\end_layout

\begin_layout Standard
language_code
\end_layout

\begin_layout Standard
ponumber
\end_layout

\begin_layout Standard
cashdiscount
\end_layout

\begin_layout Standard
discountterms
\end_layout

\begin_layout Standard
partnumber
\end_layout

\begin_layout Standard
description
\end_layout

\begin_layout Standard
sellprice
\end_layout

\begin_layout Standard
discount
\end_layout

\begin_layout Standard
qty
\end_layout

\begin_layout Standard
unit
\end_layout

\begin_layout Standard
serialnumber
\end_layout

\begin_layout Standard
projectnumber
\end_layout

\begin_layout Standard
deliverydate
\end_layout

\begin_layout Standard
AR
\end_layout

\begin_layout Standard
taxincluded
\end_layout

\begin_layout Subsection
Receipts and Payments
\end_layout

\begin_layout Standard
You can import payments and match them to invoices using the '
\series bold
Import--Payments
\series default
' menu.
 The following points should be kept in mind.
\end_layout

\begin_layout Enumerate
Payments are matched first on the Invoice DCN column and then, if no match
 is found, on the payment amount.
 
\end_layout

\begin_layout Enumerate
Both AR and AP invoices are matched with payments.
 
\end_layout

\begin_layout Enumerate
The amount matched is calculated as debit minus credit.
\end_layout

\begin_layout Subsubsection
Format your data
\end_layout

\begin_layout Standard
Create or format the data in a CSV file with structure similar to the one
 given below.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

datepaid,memo,debit,credit,dcn
\end_layout

\begin_layout Plain Layout

2008/11/03,"payment ref 2121",,38.76,
\end_layout

\begin_layout Plain Layout

2008/10/04,"cash payment",,527.5, 2008/10/10,"CC Receipt",,243.08,
\end_layout

\begin_layout Plain Layout

2009/11/01,"Payment matched by DCN",,1401.72,1122
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Upload and perview
\end_layout

\begin_layout Standard
The import script will read the CSV file and match the payments to AR or
 AP invoices first on the DCN Number and then on the invoice due amount,
 if needed.
\end_layout

\begin_layout Standard
In this example, one AP invoice is matched on the amount and the other one
 is matched on the DCN number.
 The other two are AR invoices which are matched on the amount.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_payments2.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Confirm data import
\end_layout

\begin_layout Standard
Once you click 'Import Payments', payments are imported and applied to the
 matched invoices.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_payments3.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Advanced receipts/payments import
\end_layout

\begin_layout Enumerate
You can easily change the script to match the payments on other invoice
 columns like invoice number.
 The procedures to modify are located in 'sub payments' in 'SL/IM.pm' and
 'sub im_payment' in the 'bin/mozilla/im.pl' file.
\end_layout

\begin_layout Enumerate
To match payments only to AR (or AP) invoices, change the UNION queries
 in the 'SL/IM.pm' file to select invoices from AR or AP only as required.
\end_layout

\begin_layout Subsection
AR/AP Transactions
\end_layout

\begin_layout Standard
You can import both AR and AP transactions.
\end_layout

\begin_layout Standard
For AR transactions, format your data using the following sample:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

invnumber,customernumber,transdate,amount,description,notes,source,memo
\end_layout

\begin_layout Plain Layout

00003,AE001,10-11-07,2030,"desc1","notes1","source1","memo1"
\end_layout

\begin_layout Plain Layout

00004,CP002,07-12-07,3213,"desc1","notes2","source2","memo2"
\end_layout

\begin_layout Plain Layout

00005,SP007,09-12-07,-200,"desc1","notes3","source3","memo3"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For AP transactions, format your data using the following sample:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

invnumber,vendornumber,transdate,amount,description,notes,source,memo 
\end_layout

\begin_layout Plain Layout

00003,CB001,10-10-08,2030,"desc1","notes1","source1","memo1" 
\end_layout

\begin_layout Plain Layout

00004,ES002,10-12-08,3213,"desc2","notes2","source2","memo2" 
\end_layout

\begin_layout Plain Layout

00005,SA003,12-12-08,-200,"desc3","notes3","source3","memo3"
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
General Ledger
\end_layout

\begin_layout Standard
This feature will help you to move your data from most of the accounting
 software to SQL-Ledger in just a few easy steps:
\end_layout

\begin_layout Subsubsection
Format your data
\end_layout

\begin_layout Standard
Format your data according to the following sample.
 Keep in mind that:
\end_layout

\begin_layout Enumerate
The import script will create one GL transaction for each unique 'reference'
 number.
\end_layout

\begin_layout Enumerate
There can be any number of lines (rows) in each transaction.
\end_layout

\begin_layout Enumerate
The imported account must also exist in the SQL-Ledger chart of accounts.
\end_layout

\begin_layout Enumerate
Debits and credits must be equal before the CSV file can be imported.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

reference,transdate,description,notes,accno,debit,credit,source,memo
\end_layout

\begin_layout Plain Layout

GL001,01-20-2008,"Paid for training,support",Next session in 2009,8203,124,0,232
11,new hiring
\end_layout

\begin_layout Plain Layout

GL001,01-20-2008,"Paid for training,support",Next session in 2009,1230,0,124,232
11,new hiring
\end_layout

\begin_layout Plain Layout

GL002,10-19-2008,"Overdue pymt for inv 11,12,13",,1230,204,0,"11,12,13",
 
\end_layout

\begin_layout Plain Layout

GL002,10-19-2008,"Overdue pymt for inv 11,12,13",,1102,0,204,"11,12,13",
\end_layout

\begin_layout Plain Layout

GL003,11-20-2008,Invalid transaction for testing,This account is not in
 chart,00121,0,255,source2,memo2
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Upload and preview
\end_layout

\begin_layout Standard
Use the 
\series bold
'Imports--GL Transaction'
\series default
 to load the CSV file into SQL-Ledger.
 The import script will show ’****’ in the ’Account Description’ column,
 if the row to be imported doesn’t contain a valid account number.
 Only account numbers that exists in the SQL-Ledger chart of accounts are
 valid account numbers.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gl_import2.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Confirm data import
\end_layout

\begin_layout Standard
Click Import GL to finish the import script.
 Transactions successfully imported will be show on the next page.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gl_import3.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Customers and Vendors
\end_layout

\begin_layout Standard
Customer and Vendor import is similar (except for the number column which
 is either 'customernumber' or 'vendornumber').
\end_layout

\begin_layout Standard
Prepare your data file using the sample text provided below.
 (Change customernumber to vendornumber for vendor import)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

customernumber,name,firstname,lastname,contacttitle,phone,fax,email,notes,addres
s1,address2,city,state,zipcode,country
\end_layout

\begin_layout Plain Layout

001,Ledger123,Armaghan,Saqib,Consultant,,,saqib@ledger123.com,"These are,
 just, sample notes",,,London,,"AA7 8BB",UK
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parts
\end_layout

\begin_layout Subsubsection
Format your data
\end_layout

\begin_layout Standard
Format your data according to following sample format.
 Please note that:
\end_layout

\begin_layout Enumerate
The import procedure assigns a unique parts_id to each part imported or
 group created.
\end_layout

\begin_layout Enumerate
Duplicates are not allowed and duplicate check is done on partnumber.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

partnumber,description,unit,partsgroup,listprice,sellprice,lastcost,rop,bin,imag
e,drawing,notes
\end_layout

\begin_layout Plain Layout

B002,"Brush Set",NOS,brush,9.99,9.99,7,150,TOP,noimage,brush.jpg,notes about
 brush set 
\end_layout

\begin_layout Plain Layout

D010,"Deluxe Hand Saw",NOS,SAW,17.99,17.99,16,50,TOP,saw.jpg,nodrawing,notes
 about hand saw 
\end_layout

\begin_layout Plain Layout

D011,"Digger Hand Trencher",NOS,Picks & Hatchets,18.99,18.99,15,200,TOP,,nodrawing
,notes about hand saw
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Upload and preview
\end_layout

\begin_layout Standard
To start the import process, click '
\series bold
Data Import--Parts
\series default
' in the menu.
 The following page will be displayed.
 Click 'Browse...' to select your CSV file, mark the taxes applicable and select
 the account links (The defaults are usually enough) Click 'Continue' when
 done.
 You will be presented with the following screen.
 On this screen you can mark the parts to be imported by checking or un-checking
 the check-box on each line.
\end_layout

\begin_layout Standard
Please note:
\end_layout

\begin_layout Enumerate
Any parts which are already in SQL-Ledger (based on 'partnumber') will not
 imported.
 (You will not see a check-box with them)
\end_layout

\begin_layout Enumerate
Parts 'groups' which are new will be added.
 These are marked by a '+' sign after group name.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_parts1.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_parts2.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Confirm data import
\end_layout

\begin_layout Standard
Click 'Import Parts'.
 Your CSV file will be processed and parts will be imported.
 Any new groups will also be added.
 You will see an output like the following:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_parts3.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Vendor price list
\end_layout

\begin_layout Subsubsection
Format your data
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

partnumber,vendornumber,vendorpartnumber,lastcost,curr,leadtime
\end_layout

\begin_layout Plain Layout

B001,CB001,V-CB001,10,GBP,15 B002,ES002,,14,GBP,45 M004,SA003,,21,GBP,30
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Upload and preview
\end_layout

\begin_layout Standard
To start the import process, click '
\series bold
Import–Vendor Price List
\series default
' in the menu, specify your CSV file with the 'Browse' button and click
 the 'Import Parts Vendors' button.
 The following page will be displayed.
 Here you can un-check the rows which you do not want to import.
 Rows with an invalid 'vendor number' or 'partnumber' will not have the
 check-box.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_partsvendors.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Customer price list
\end_layout

\begin_layout Subsubsection
Format your data
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

partnumber,customernumber,pricegroup,pricebreak,sellprice,validfrom,validto,curr
\end_layout

\begin_layout Plain Layout

B001,AE001,PG1,10,11,03-01-2008,,GBP
\end_layout

\begin_layout Plain Layout

B002,BP011,,20,12,,03-01-2009,GBP
\end_layout

\begin_layout Plain Layout

M004,CP002,,15,20,03-01-2008,03-05-2008,GBP
\end_layout

\begin_layout Plain Layout

D08,CP002,test,25,25,,,GBP
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Upload and preview
\end_layout

\begin_layout Standard
To start the import process, click '
\series bold
Import–Customer Price List
\series default
' in the menu, specify your CSV file with the 'Browse...' button and click
 the 'Import Parts Customers' button.
 The following page will be displayed.
 Here you can un-check the rows which you do not want to import.
 Rows with an invalid 'customer number' or 'partnumber' will not have the
 check-box.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename import_partscustomers.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Chart of accounts
\end_layout

\begin_layout Subsubsection
Format your data
\end_layout

\begin_layout Enumerate
Prepare your chart of accounts in your spreadsheet software according to
 the sample given below.
 
\end_layout

\begin_layout Enumerate
Upload the chart CSV file using '
\series bold
Import--Chart
\series default
' menu option.
 
\end_layout

\begin_layout Enumerate
Check/un-check the accounts to be imported and click 'Continue' to import
 the selected accounts.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

accno,description,charttype,category,link 
\end_layout

\begin_layout Plain Layout

1000,"CURRENT ASSETS",H,A, 
\end_layout

\begin_layout Plain Layout

1060,"Checking Account",A,A,AR_paid:AP_paid 
\end_layout

\begin_layout Plain Layout

1065,"Petty Cash",A,A,AR_paid:AP_paid 
\end_layout

\begin_layout Plain Layout

1200,"Accounts Receivables",A,A,AR 
\end_layout

\begin_layout Plain Layout

1205,"Allowance for doubtful accounts",A,A, 
\end_layout

\begin_layout Plain Layout

1500,"INVENTORY ASSETS",H,A, 
\end_layout

\begin_layout Plain Layout

1520,"Inventory / General",A,A,IC 
\end_layout

\begin_layout Plain Layout

1530,"Inventory / Aftermarket Parts",A,A,IC 
\end_layout

\begin_layout Plain Layout

1800,"CAPITAL ASSETS",H,A,
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Running your business on SQL-Ledger 
\end_layout

\begin_layout Standard
In this chapter we explain all the modules which are there in SQL-Ledger
 and how you can use them for your business.
\end_layout

\begin_layout Section
AR
\end_layout

\begin_layout Standard
AR stands for 'Accounts Receivable'.
 AR module is used to record your sales with your customers.
 You can record your sales in two possible ways:
\end_layout

\begin_layout Enumerate
'Sales Invoice' is a standard way to record sales.
 In a sales invoice you specify the goods and/or services you have sold
 to your customer.
 This method requires setup of goods and services using the '
\series bold
Goods & Services
\series default
' menu.
 You can print the invoice and send it to your customer.
 If you are managing your inventory, you should use this method to reduce
 the inventory when you sell something.
\end_layout

\begin_layout Enumerate
'AR Transaction' is a simplified way to book your sales and receipts using
 chart of accounts.
 This method is quick and requires no setup except adjusting / adding to
 the chart of accounts for your sales accounts.
\end_layout

\begin_layout Standard
Both methods can be mixed and matched based upon nature of transactions.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuar.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
AR Transaction
\end_layout

\begin_layout Standard
The 
\series bold
'AR--Add Transaction'
\series default
 menu is used to create AR Transactions.
 These transactions allow you to record your sales in correct GL accounts
 without creating an invoice.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ar1.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Sales Invoice
\end_layout

\begin_layout Standard
Sales invoices are created using the 
\series bold
'AR--Sales Invoice'
\series default
 menu.
 The only mandatory columns in the header section of this screen are 'Customer'
 and 'Invoice Date'.
 Rest of the columns can be left blank.
\end_layout

\begin_layout Standard
Your invoice can contain multiple parts and services.
 Once you enter an item (part, service) and click 'Update', a new line appears.
 This way you can enter any number of items (parts, services or labor) in
 the detail portion of the invoice.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ar2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
By default only 'item number', 'description', 'qty', 'unit', 'price' and
 'discount' are shown on each line item.
 You can also display additional input columns for extended information
 on each line item.
 To do this, just check the check-box next to 'Description' column of the
 line item or heading and click update.
 Now the invoice form will be displayed with extended line items as shown
 below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ar3.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Credit Note
\end_layout

\begin_layout Subsection
Credit Invoice and Credit Note
\end_layout

\begin_layout Standard
Credit invoice is used to record a sale return recorded earlier with a sales
 invoice.
 A credit invoice will also add the items sold back to the inventory for
 re-sale as well as update your accounts receivable and sales accounts.
\end_layout

\begin_layout Standard
Credit note is used to record a sale return without creating a credit invoice.
 A credit note is typically used to record reversal of 'AR Transaction'.
 though it can also be used to reverse all or part of a sales invoice but
 be aware that inventory is not added back to your stock with a credit note.
 So it is good to reverse any service sale but not for reversing tangible
 goods' sale.
\end_layout

\begin_layout Subsubsection
Creating a credit invoice
\end_layout

\begin_layout Standard
Use 'AR--Credit Invoice' menu to create your credit invoice.
 Creating a credit invoice is similar to creating a sales invoice.
 See above for details.
\end_layout

\begin_layout Subsubsection
Creating a credit note
\end_layout

\begin_layout Standard
Use 'AR--Credit Note' menu to create your credit note.
 Creating a credit note is very similar to creating an AR transaction.
 See above for details.
 
\end_layout

\begin_layout Subsubsection
Adjusting credit note or credit invoice
\end_layout

\begin_layout Standard
Once you have an open invoice as well as a credit note or credit invoice,
 you can adjust them to each other.
 To do this:
\end_layout

\begin_layout Enumerate
You go to 'Cash--Receipt' menu, select the customer and click 'Update' button.
 This will show all invoices as shown below.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename invoice-adjustment.png

\end_inset


\end_layout

\begin_layout Enumerate
Now you can click to check the invoices which you want to adjust to each
 other.
 and click 'Update'.
 If the amounts of both open invoice and credit invoice are equal, there
 will be no amount in the 'Amount' column in header.
 For your reference you can put something like 'adjustment' in source column.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename invoice-adjustment2.png

\end_inset


\end_layout

\begin_layout Enumerate
Now you just click 'Post'.
 Your credit invoice will be adjusted against the open invoice.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename invoice-adjustment3.png

\end_inset


\end_layout

\begin_layout Section
AR Reports
\end_layout

\begin_layout Subsection
Transactions Report
\end_layout

\begin_layout Standard
Transaction report shows all open or closed transactions and invoices for
 the specified criteria on search screen.
 On search screen you can specify various criteria and select/de-select
 columns which you want to shown on the screen.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename artrans.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
When you click 'Continue' button after specifying the required criteria,
 your report is displayed.
 This is 'Summary' report where each invoice or transaction is shown on
 single line.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename artrans2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
The 'Detail' report shows debits and credits of each transaction along with
 account number.
 In detail report, a single invoice or transaction is shown on multiple
 times.
 You can click 'Subtotal' to subtotal and group this report by invoice number.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename artrans3.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Aging Report
\end_layout

\begin_layout Standard
Aging report shows the outstanding balances of your customers divided into
 predefined periods of time in the past.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ar-aging-search.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
The summary aging report (shown below) shows on-line for each customer with
 outstanding balance.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ar-aging-summ.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
The detail aging report (shown below) shows all outstanding invoices for
 each customer with subtotal by the customer.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ar-aging-detail.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Reminders
\end_layout

\begin_layout Standard
You can print or email reminders to your customers.
 You can define up to 3 levels of reminders.
 Level 1 being a polite one and level 3 being a bit harsh one.
 
\end_layout

\begin_layout Standard
When you print a reminder, its level is stored in the database.
 Next time when you print reminder for the same customer, next level of
 reminder is printed.
 You also have the option to change the reminder level yourself.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename reminder1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename reminder2.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Customer History Reports
\end_layout

\begin_layout Standard
You can use history reports to see which customer is giving you more business.
 You can filter the report on date range which is applied to the invoices
 (or orders or quotations)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename customer-history1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Customer history summary report shows business activity grouped by item.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename customer-history2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Customer history detail report shows business activity by invoice and item.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename customer-history3.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Point of Sales (POS)
\end_layout

\begin_layout Standard
Point of sales (POS) module allows quick invoicing at busy places like a
 shop or a restaurant.
 The items and customers you have defined for your invoices can be used
 for POS invoicing too.
 The only difference of POS invoice creation with standard AR invoice creation
 is a simplified data entry screen and a POS optimized receipts section.
\end_layout

\begin_layout Subsection
Creating a POS invoice
\end_layout

\begin_layout Standard
You use '
\series bold
POS--Sale
\series default
' to create a new POS invoice.
 The screen below is shown.
 Here you select a customer and then add items (parts or services) which
 you going to sell to a particular customer.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Hint: If you cater to walk-in customers and don't want to create a customer
 record for each walk-in customer then you can just add a customer with
 'Walk-in' customer as name.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Item groups are shown as buttons on POS screen to make it easier to select
 the item you want to sell.
 Make sure click the checkbox 'POS Button' to show that group as a button
 on the screen.
 You can click this group button to display all the items in this group
 and you can select or all items in that group.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pos1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pos2.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Viewing open invoices
\end_layout

\begin_layout Standard
In places like retail shops a POS invoice is created and closed in one step.
 In places like restaurant, there is a considerable time period when an
 invoice is created and when it is closed.
 In later scenearioes, you create a POS invoice when the customer has ordered
 food.
 Once the customer has consumed the food and is ready to pay you locate
 the invoice and then add the payment to it.
\end_layout

\begin_layout Standard
To do this, you view the open invoices using '
\series bold
POS--Sale
\series default
' menu and then open that invoice.
 In the payment section, you put the payment received from the customer
 as well as the account which could be cash or credit card or something
 else.
\end_layout

\begin_layout Standard
If you will add more payment than the invoice amount then the rest of the
 amount will be shown as 'change' which needs to be returned back to the
 customer and invoice will be closed with payment equal to the invoice amount.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pos3.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Receipts
\end_layout

\begin_layout Standard
This is a report which will show the receipts done so far with your POS
 module.
 Use 'POS--Receipts' menu for this report.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pos4.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pos5.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
AP
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuap.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
AP Transactions
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ap1.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Purchase Invoice
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ap2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ap3.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
AP Reports
\end_layout

\begin_layout Subsection
Transactions Report
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename aptrans.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename aptrans2.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Aging Report
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ar-aging-search.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ap-aging2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ap-aging3.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Vendor History
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vendor-history1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vendor-history2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vendor-history3.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Cash
\end_layout

\begin_layout Subsection
Receipts
\end_layout

\begin_layout Standard
The
\series bold
 'Cash--Receipt'
\series default
 menu is used to record receipts from your customers against outstanding
 invoices.
 Another menu 
\series bold
'Cash--Receipts'
\series default
 allows you to enter receipts from multiple customers.
 Both have same effect but the later one make data entry quick for adding
 receipts from multiple customers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menucash.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Recording receipts from one customer at a time
\end_layout

\begin_layout Standard
There are two ways to record payment from your customer:
\end_layout

\begin_layout Enumerate
You can put the receipt information at the footer of your invoice when creating
 the invoice if the invoice has been paid at the time of purchase.
\end_layout

\begin_layout Enumerate
You can use 
\series bold
'Cash--Receipt'
\series default
 menu to record receipt for a particular customer.
 Using this method is advisible as you do not need to edit invoices to record
 the receipt.
 This method also allows you to record a single receipt for multiple invoices.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receipt1.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Recording receipts from multiple customers in one go.
\end_layout

\begin_layout Standard
The 
\series bold
'Cash--Receipts'
\series default
 menu allows you to quickly record receipts for multiple invoices for multiple
 customers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receipt2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Receipts report show you receipts for the particular period according to
 your bank account.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receipt3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receipt4.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Payments
\end_layout

\begin_layout Standard
There are two ways to record payment from your vendor.
\end_layout

\begin_layout Enumerate
You can put the payment information at the footer of your invoice when creating
 the invoice if the invoice has been paid at the time of purchase.
\end_layout

\begin_layout Enumerate
You can use 
\series bold
'Cash--Payment'
\series default
 menu to record payment for a particular vendor.
 Using this method is advisable as you do not need to edit invoices to record
 the payment.
 This method also allows you to record a single payment for multiple invoices.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename payment1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Multiple payments to multiple vendors.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename payment2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename payment3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename payment4.png
	scale 45

\end_inset

recon
\end_layout

\begin_layout Section
General Ledger
\end_layout

\begin_layout Standard
General Ledger module is used to add standard accounting journals with debit
 and credit amounts to some accounts from chart of accounts.
 You cannot post a transactions until the total of debits is equal to the
 total of credits.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menugl.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Add Transaction
\end_layout

\begin_layout Standard
Use 
\series bold
'General Ledger--Add Transaction'
\series default
 menu to add a new GL transaction.
 On this screen you can put some reference number in the 'Reference' column.
 If you leave it blank, SQL-Ledger will assign next number from the scheme
 defined in defaults.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gl1.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsection
Reports
\end_layout

\begin_layout Standard
The
\series bold
 'General Ledger--Reports'
\series default
 menu is used to view all accounting journals with debits and credits to
 the particular accounts.
 Initially this report can be confusing because it shows not only the journals
 added using 'Add Transaction' menu show above but also all accounting transacti
ons posted from AR, AP and Cash modules.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gl2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Report can be sorted on any column.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gl3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gl4.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Recurring Transactions
\end_layout

\begin_layout Standard
Recurring Transactions allow you to auto-generate predefined invoices, transacti
ons and orders.
\end_layout

\begin_layout Standard
This feature can be used for the following:
\end_layout

\begin_layout Enumerate
Recurring billing to a customer (For rent, web hosting, school fee, installment
 etc.) 
\end_layout

\begin_layout Enumerate
Recurring billing from your vendor 
\end_layout

\begin_layout Enumerate
Monthly orders to your vendors or from your customers.
 
\end_layout

\begin_layout Enumerate
Monthly payroll posting using GL Recurring Transactions.
 
\end_layout

\begin_layout Enumerate
Month-end adjustments and allocations.
\end_layout

\begin_layout Subsection
Scheduling
\end_layout

\begin_layout Standard
To generate the next number for a given transaction, leave the Next Number
 blank.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename recurring2.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Generating
\end_layout

\begin_layout Standard
When recurring transactions are due you are reminded when you login to SQL-Ledge
r.
 With a single click you can generate all recurring transactions, print
 or email invoices and orders.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename recurring3.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Section
Exchange Rates
\end_layout

\begin_layout Standard
You can define and use multiple currencies in SQL-Ledger.
\end_layout

\begin_layout Subsection
Defining currencies
\end_layout

\begin_layout Standard
To define a new currency use System--Currencies menu.
 The top-most currency is the default currency.
 You can move the currencies up and down using the arrows on the currency
 list.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename curr1.jpg

\end_inset


\end_layout

\begin_layout Subsection
Buying and selling in foreign currencies
\end_layout

\begin_layout Standard
When you want to create invoice in currency, just change the currency code
 from currency dropdown box.
 SQL-Ledger will show you the last exchange rate for this currency.
 You can just accept this rate or change it.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename curr2.jpg

\end_inset


\end_layout

\begin_layout Subsection
Reports
\end_layout

\begin_layout Standard
You can view reports in base currency as well as in the foreign currency.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename curr3.jpg

\end_inset


\end_layout

\begin_layout Subsection
Exchange rate difference
\end_layout

\begin_layout Subsection
Funds transfers in foreign currencies
\end_layout

\begin_layout Standard
Let us say the exchange rate is 1 GBP = 2.0289 (or reverse 1 USD = 0.4929
 GBP)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename curr4.jpg

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename curr5.jpg

\end_inset


\end_layout

\begin_layout Section
Quotations and RFQs
\end_layout

\begin_layout Standard
You can use SQL-Ledger to send quotations to your customers or request your
 vendors for quotations (RFQs).
 Later on you can convert quotations to sales orders and RFQs to purchase
 orders.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuquotations.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Quotations
\end_layout

\begin_layout Standard
Use 
\series bold
'Quotations--Quotation'
\series default
 menu to add a new quotation for your customer.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename quotations1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
To get report of existing quotations or to editing a quotation, use the
 
\series bold
'Quotations--Reports--Quotations'
\series default
 menu.
 The search screen will be displayed where you can specify any conditions
 to filter the report or just leave blank and click 'Continue' button to
 get all existing quotations.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename quotations2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename quotations3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Once a quotation has been made, you can create a purchase order from it.
 Creating a PO from a quotation will mark it closed.
 You can also close a quotation just by clicking the 'Closed' radio button
 when you edit a quotation.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename quotations4.png

\end_inset


\end_layout

\begin_layout Subsection
RFQ
\end_layout

\begin_layout Standard
Use the 
\series bold
'Quotations--RFQ'
\series default
 menu to add a new quotation for your customer.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename rfq1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
To get report of existing RFQs or to editing an RFQ, use the 
\series bold
'Quotations--Reports--RFQs'
\series default
 menu.
 The search screen will be displayed where you can specify any conditions
 to filter the report or just leave blank and click 'Continue' button to
 get all existing RFQs.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename rfq2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename rfq3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Once an RFQ has been made, you can create a sales order from it.
 Creating an SO from an RFQ will mark it closed.
 You can also close an RFQ just by clicking the 'Closed' radio button when
 you edit it.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename rfq4.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Orders
\end_layout

\begin_layout Standard
SQL-Ledger has very powerful 'Orders' module.
 Orders module can be used to create purchase orders for your vendors or
 sales orders to your customers.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menuorders.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Here are few points to remember:
\end_layout

\begin_layout Enumerate
When you create an invoice from order, you cannot edit the quantities on
 invoice screen or add or remove items.
 
\end_layout

\begin_layout Enumerate
When you create invoice from a partially received order, this order is marked
 closed and a new order with same number but remaining quantities and new
 order date is created.
 
\end_layout

\begin_layout Subsection
Sales Orders
\end_layout

\begin_layout Standard
A purchase order allows you to order goods and services from your vendor.
 You can:
\end_layout

\begin_layout Enumerate
Make a sales order.
\end_layout

\begin_layout Enumerate
Receive a sales order fully or partially using 'Shipping--Ship'.
\end_layout

\begin_layout Enumerate
Create a customer invoice from a partially or fully received sales order.
\end_layout

\begin_layout Enumerate
If warehouses are enabled, you can ship goods from a particular warehouse.
\end_layout

\begin_layout Subsubsection
Add a new sales order
\end_layout

\begin_layout Standard
The 
\series bold
'Order Entry--Sales Order'
\series default
 will display the following 'Add Sales Order' screen.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename so1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
If you want to enter more information for each item you can click the checkbox
 next to the 'Description' column and then 'Update'.
 Now each detail line will span 5 lines where you can enter lots of information
 for each item you order.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename so2.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsubsection
Editing a SO
\end_layout

\begin_layout Standard
To edit an existing SO, you display list of existing orders using the 
\series bold
'Order Entry--Reports--Sales Order'
\series default
 and click on SO number to edit that particular SO.
\end_layout

\begin_layout Subsubsection
Creating a quotation or customer invoice from an SO
\end_layout

\begin_layout Standard
When you have saved a SO, you can open it in editing and create a quotation.
 When you have received quantities you can directly create vendor invoice
 from the SO.
 (Also see below to see how to use 'Shipping' menu to partially receive
 a PO.)
\end_layout

\begin_layout Standard
TODO: Screen shot with quotation and vendor invoice buttons.
\end_layout

\begin_layout Subsubsection
Receiving an SO
\end_layout

\begin_layout Standard
There are two ways to receive a SO.
\end_layout

\begin_layout Enumerate
Open the SO and click 'Customer Invoice' button.
 The SO will be received in full, marked 'closed' and a customer invoice
 will be created for it.
 Inventory on-hand will be updated.
\end_layout

\begin_layout Enumerate
Use '
\series bold
Shipping--Receive
\series default
' to receive a PO fully or partially.
 Inventory on-hand will be updated.
 Later on you can open the PO and create vendor invoice.
 
\end_layout

\begin_layout Standard
Let us see how it is done using the '
\series bold
Shipping
\series default
' menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menushipping.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Following screen is displayed when you click '
\series bold
Shipping--Ship
\series default
'.
 Here you can select SOs you want to process or just 'Continue' button if
 you want to process all open SOs.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
The following screen shows all SOs with open quantities.
 You click on a particular SO to receive goods in it.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
The selected SO is displayed with order quantities and you can put the quantitie
s received in the 'Ship' column.
 If there are any serial numbers associated with shipped goods you put them
 in serial number column.
 You also need to specify correct receiving date.
 In the example below we are partially receiving this SO.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
If you open this SO again (using 
\series bold
'Order Entry--Reports--Sales Orders
\series default
') you will see the quantity received in the 'Ship' column.
 Received quantity gets updated every time you receive goods using the '
\series bold
Shipping--Ship
\series default
' menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive4.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Creating customer invoice from an SO
\end_layout

\begin_layout Standard
You can create a customer invoice from an SO for the quantities received
 so far.
 To do this just click the 'Vendor Invoice' button and the 'Add Vendor Invoice'
 screen will open up with data from that SO as well as received quantities
 as show below.
\end_layout

\begin_layout Standard
Once a vendor invoice has been created for a SO, that SO is closed.
 If there were some open quantities in that SO then a new SO with same number
 and remaining items with open quantities.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive5.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Sales order reports
\end_layout

\begin_layout Standard
The
\series bold
 'Order Entry--Reports--Sales Orders'
\series default
 menu shows you all your purchase orders.
 You can check/uncheck the 'Open' and 'Closed' check boxes on search screen
 before you continue.
 'Closed' SOs are those which have been fully received OR which have been
 marked 'Closed' by editing the PO.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename so3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Sales order report
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename so4.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Purchase Order
\end_layout

\begin_layout Standard
A purchase order allows you to order goods and services from your vendor.
 You can:
\end_layout

\begin_layout Enumerate
Make a purchase order.
\end_layout

\begin_layout Enumerate
Receive a purchase order fully or partially using 'Shipping--Receive'.
\end_layout

\begin_layout Enumerate
Create a vendor invoice from a partially or fully received order.
\end_layout

\begin_layout Enumerate
If warehouses are enabled, you can receive goods to a particular warehouse.
\end_layout

\begin_layout Subsubsection
Add a new purchase order
\end_layout

\begin_layout Standard
The 
\series bold
'Order Entry--Purchase Order'
\series default
 will display the following 'Add Purchase Order' screen.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename po1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
If you want to enter more information for each item you can click the checkbox
 next to the 'Description' column and then 'Update'.
 Now each detail line will span 5 lines where you can enter lots of information
 for each item you order.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename po2.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Editing a PO
\end_layout

\begin_layout Standard
To edit an existing PO, you display list of existing orders using the 
\series bold
'Order Entry--Reports--Purchase Orders'
\series default
 and click on PO number to edit that particular PO.
\end_layout

\begin_layout Subsubsection
Creating an RFQ or vendor invoice from a PO
\end_layout

\begin_layout Standard
When you have saved a PO, you can open it in editing and create an RFQ (request
 for quotation).
 When you have received quantities you can directly create vendor invoice
 from the PO.
 (Also see below to see how to use '
\series bold
Shipping
\series default
' menu to partially receive a PO.)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename po3.png
	scale 45

\end_inset


\end_layout

\begin_layout Subsubsection
Receiving a PO
\end_layout

\begin_layout Standard
There are two ways to receive a PO.
\end_layout

\begin_layout Enumerate
Open the PO and click 'Vendor Invoice' button.
 The PO will be received in full, marked 'closed' and a vendor invoice will
 be created for it.
 Inventory on-hand will be updated.
\end_layout

\begin_layout Enumerate
Use '
\series bold
Shipping--Receive
\series default
' to receive a PO fully or partially.
 Inventory on-hand will be updated.
 Later on you can open the PO and create vendor invoice.
 
\end_layout

\begin_layout Standard
Let us see how it is done using the '
\series bold
Shipping
\series default
' menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menushipping.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Following screen is displayed when you click '
\series bold
Shipping--Receive
\series default
'.
 Here you can select POs you want to process or just 'Continue' button if
 you want to process all open POs.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
The following screen shows all POs with open quantities.
 You click on a particular PO to receive goods in it.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
The selected PO is displayed with order quantities and you can put the quantitie
s received in the 'Rcvd' column.
 If there are any serial numbers associated with received goods you put
 them in serial number column.
 You also need to specify correct receiving date.
 In the example below we are partially receiving this PO.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
If you open this PO again (using 
\series bold
'Order Entry--Reports--Purchase Orders
\series default
') you will see the quantity received in the 'Rcvd' column.
 Received quantity gets updated every time you receive goods using the '
\series bold
Shipping--Receive
\series default
' menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive4.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Creating vendor invoice from PO
\end_layout

\begin_layout Standard
You can create a vendor invoice for the quantities received so far.
 To do this just click the 'Vendor Invoice' button and the 'Add Vendor Invoice'
 screen will open for received quantities as show below.
\end_layout

\begin_layout Standard
Once a vendor invoice has been created for a PO, that PO is closed.
 If there were some open quantities in that PO then a new PO with same number
 and remaining items with open quantities.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename receive5.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Purchase order reports
\end_layout

\begin_layout Standard
The
\series bold
 'Order Entry--Reports--Purchase Orders'
\series default
 menu shows you all your purchase orders.
 You can check/uncheck the 'Open' and 'Closed' checkboxes on search screen
 before you continue.
 'Closed' POs are those which have been fully received OR which have been
 marked 'Closed' by editing the PO.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename poreport1.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection
Order Entry Notes
\end_layout

\begin_layout Enumerate
Normally inventory on-hand quantities are updated when you create a vendor
 or customer invoice.
 This default behavior is changed if you are using orders module.
 See below.
\end_layout

\begin_layout Enumerate
When you receive or ship an order through '
\series bold
Shipping
\series default
' menu your inventory on-hand is immediately updated.
 You can confirm this by viewing '
\series bold
Warehouses--Reports--Onhand
\series default
' immediately after you receive or ship an order.
 Your AR or AP is updated only when you create an invoice from a partially
 or fully received order.
\end_layout

\begin_layout Enumerate
You cannot change item quantities or add new items when an invoice is created
 from a partially or fully shipped/received order.
 This feature to keep the invoices and orders data in sync.
\end_layout

\begin_layout Enumerate
When you create invoice from a partially shipped or received order, SQL-Ledger
 closes that order and creates a new one with the remaining order quantities
 but with same order number.
\end_layout

\begin_layout Subsection
Important inventory on-hand reports from orders
\end_layout

\begin_layout Standard
Inventory on hand at warehouses:
\end_layout

\begin_layout Enumerate
The 
\series bold
'Goods & Services–All Items'
\series default
 report.
 Check the 'Warehouse' checkbox on search screen.
 
\end_layout

\begin_layout Enumerate
The 
\series bold
'Warehouses–Reports–Onhand'
\end_layout

\begin_layout Enumerate
Inventory receive/ship activity: The 
\series bold
'Warehouses–Reports–Activity'
\series default
 report.
 
\end_layout

\begin_layout Section
Time Cards
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Audit Control
\end_layout

\begin_layout Standard
You can use System-Audit Control menu to enforce transaction control and
 log user activities.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename auditcontrol.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Subsection*
Enforce transaction reversal for all dates
\end_layout

\begin_layout Standard
You can check this option to prevent any change to any transaction.
 You can however add a reverse transaction to correct some mistake.
 This option is highly recommended.
\end_layout

\begin_layout Subsection*
Close Books up to
\end_layout

\begin_layout Standard
When you close books upto a certain date, system does not allow changing
 any transaction prior to this date.
 Please note that this is not a year end process.
\end_layout

\begin_layout Subsection*
Activate Audit trail
\end_layout

\begin_layout Standard
All user activity (adding, changing, deleting transactions) is logged.
 You can view this log using 
\series bold
System--Audit Trail
\series default
 report.
\end_layout

\begin_layout Subsection*
Remove Audit trail up to
\end_layout

\begin_layout Standard
You can use this option to remove audit trail from database up to a certain
 date.
 Useful to make your backups small.
\end_layout

\begin_layout Section
Reconciliation
\end_layout

\begin_layout Standard
Bank reconciliation
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename reco1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Marking reconciled transactions.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename reco2.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
Reconciled transactions report.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename reco3.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename reco4.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Year End
\end_layout

\begin_layout Standard
The 
\series bold
'System--Yearend'
\series default
 menu does the period closing in SQL-Ledger.
 It creates a GL transaction which clears the income accounts and posts
 the difference (which is income or loss) to the specified retained earnings
 account.
\end_layout

\begin_layout Standard
Please note that:
\end_layout

\begin_layout Enumerate
Year-end process can be run daily, weekly, monthly, quarterly or yearly.
 
\end_layout

\begin_layout Enumerate
Year-end GL transaction is not included in the income statement which covers
 period containing a closing transactions.
 
\end_layout

\begin_layout Enumerate
The year-end GL transaction can be viewed through GL reports and edited
 or deleted as required.
\end_layout

\begin_layout Standard
This is year end screen and the GL transaction created by year-end process.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename yearend.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename yearend2.jpg

\end_inset


\end_layout

\begin_layout Section
Data backup
\end_layout

\begin_layout Standard
You can backup your data directly through SQL-Ledger.
 There are two ways to get your backup using the 
\series bold
System--Backup
\series default
 menu.
\end_layout

\begin_layout Subsection*
System--Backup--Send by Email
\end_layout

\begin_layout Standard
Backup is sent to your email address through email.
 You can add or change this email address through '
\series bold
Preferences
\series default
' menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename backup.jpg

\end_inset


\end_layout

\begin_layout Subsection*
System--Backup--Save to File
\end_layout

\begin_layout Standard
When you click this menu option your browser will display the save file
 dialog and you can save backup file on your computer.
\end_layout

\begin_layout Chapter
Keeping track of your business in SQL-Ledger 
\end_layout

\begin_layout Standard
This sections explains the various reports which are available in SQL-Ledger
 to monitor and track your business once you have started recording your
 business transactions.
 SQL-Ledger stores all your business data in an SQL database.
 SQL, which stands for Structured Query Language, is a special purpose programmi
ng language designed for managing data held in a relation database management
 system.
 SQL is also a standard of the International Organization for Standardization
 (ISO).
\end_layout

\begin_layout Standard
Running SQL queries on a business database can be a very complex matter
 and usually also requires basic knowledge regarding the individual database
 structure.
 The developers of SQL-Ledger made it one of their major goals to simplify
 this process of SQL queries and were able to find a unique way to make
 it an easy task for anyone to analyze the business data stored inside the
 database, even without knowledge in SQL.
\end_layout

\begin_layout Standard
The way this is done is actually rather simple.
 There are many different reports in SQL-Ledger and this is one of its unique
 strengths.
 All reports in SQL-Ledger can be divided into two main groups:
\end_layout

\begin_layout Standard
a.) financial statement reports
\end_layout

\begin_layout Standard
b.) Module reports.
 re are two kinds of reports in SQL-Ledger the financial and each report
 can be individually.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename menureports.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Trial Balance
\end_layout

\begin_layout Standard
Trial balance is a standard accounting report which shows amounts posted
 to each account in your chart of accounts.
 Trial balance is a summary of all transactions posted from all modules.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trial1.png
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename trial2.png
	scale 45

\end_inset


\end_layout

\begin_layout Section
Income Statement
\end_layout

\begin_layout Standard
Income statement can be run for any period.
 You can also compare the income statement with any previous period.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename income1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
The following income statement is for a single period.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename income2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
The following income statement includes two periods.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename income3.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Balance Sheet
\end_layout

\begin_layout Standard
Balance sheet can be displayed up to any particular date.
 Like income statement, you can also compare it with balances at some older
 date.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename balancesheet1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename balancesheet2.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Tax Report
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Basics of double-entry accounting system
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Double entry accounting system, although much feared by non-accountants,
 is a very simple but extremely powerful method of managing money.
 SQL-Ledger does much of the double entry accounting itself linking all
 parts of the application through a chart of accounts.
 
\end_layout

\begin_layout Standard
You need to know about double entry system only when you are going to make
 general ledger transactions.
 Its basic principle is that every business transaction affects at least
 two accounts.
 For example:
\end_layout

\begin_layout Itemize
When you buy a car, you cash is decreased and your assets are increased.
 
\end_layout

\begin_layout Itemize
When you sell a item on cash, your sale is increased and your cash is also
 increased.
 
\end_layout

\begin_layout Subsection
Account types
\end_layout

\begin_layout Standard
There are five basic types of accounts which are given below:
\end_layout

\begin_layout Enumerate
Assets 
\end_layout

\begin_layout Enumerate
Liabilities 
\end_layout

\begin_layout Enumerate
Capital 
\end_layout

\begin_layout Enumerate
Sales 
\end_layout

\begin_layout Enumerate
Expenses 
\end_layout

\begin_layout Subsection
Accounting rules
\end_layout

\begin_layout Itemize
Assets (1) and Expenses (5) are increased by debit and decreased by credit
\end_layout

\begin_layout Itemize
Liabilities (2), Capital (3) and Sales (4) are increased by credit and decreased
 by debit.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection*
You invest $1000 to start a new business:
\end_layout

\begin_layout Itemize
Debit: Your bank account 
\end_layout

\begin_layout Itemize
Credit: Capital account 
\end_layout

\begin_layout Subsubsection*
You pay $100 check for office rent:
\end_layout

\begin_layout Itemize
Debit: Office rent expense account 
\end_layout

\begin_layout Itemize
Credit: Your bank account 
\end_layout

\begin_layout Subsubsection*
You build a website for a customer asking him to pay $200.
 Customer promises to pay after 20 days.
\end_layout

\begin_layout Itemize
Debit: Accounts Receivables (Debtors) 
\end_layout

\begin_layout Itemize
Credit: Sales 
\end_layout

\begin_layout Subsubsection*
Your customer pays you $200 after 20 days.
\end_layout

\begin_layout Itemize
Debit: Your bank account 
\end_layout

\begin_layout Itemize
Credit: Accounts Receivables (Debtors)
\end_layout

\begin_layout Standard
Here is a really simple and useful accounting tutorial: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.a-systems.net/accounting.htm"

\end_inset


\end_layout

\begin_layout Section
Cost of Goods Sold (COGS)
\end_layout

\begin_layout Standard
Cost of Goods Sold (COGS) is the purchase price of the goods you just sold.
 Your sales minus the COGS is your gross profit.
 COGS is an important accounting information.
 Correct COGS gives you a clear picture of the profitability of your products.
\end_layout

\begin_layout Standard
Tip: To view the debit and credit accounting transactions for any sale or
 purchase invoice, enter the invoice number on 
\series bold
General Ledger–Reports
\series default
 screen and click Continue button.
\end_layout

\begin_layout Subsection
Sale invoices and COGS
\end_layout

\begin_layout Standard
Let us make it clear with an example:
\end_layout

\begin_layout Standard
You purchase 10 iPhones for $400 each.
\end_layout

\begin_layout Itemize
Debit: Inventory $4000 
\end_layout

\begin_layout Itemize
Credit: AP $4000
\end_layout

\begin_layout Standard
A customer comes in and purchases 2 of these at $500 each.
\end_layout

\begin_layout Itemize
Debit: AR $1000 Credit: Sales $1000 
\end_layout

\begin_layout Itemize
Debit: COGS $800 Credit: Inventory $800 
\end_layout

\begin_layout Standard
So your gross profit is $200.
\end_layout

\begin_layout Standard
SQL-Ledger posts COGS automatically with each sale invoice.
 It calculates COGS on First-In First-Out (FIFO) basis.
 This means is that if you purchase 5 more iPhones at $430 each, MyLedger
 will keep calculating COGS @ $400 each until all 10 iPhones of first purchase
 transaction are depleted.
 Afterward it will calculate COGS @ $430.
\end_layout

\begin_layout Subsection
Sales before purchases
\end_layout

\begin_layout Standard
SQL-Ledger allows you to sell goods without purchasing these in advance.
 This is a common practice in many businesses where you have received the
 goods but do not have the vendor invoice.
\end_layout

\begin_layout Standard
This results in negative stock quantity on Goods & Services--Reports--All
 Items report.
 No COGS is posted for such transactions at the time of sale.
 Later when you record purchases, COGS is automatically recorded for these
 oversold items.
\end_layout

\begin_layout Subsection
Editing Sale Invoices
\end_layout

\begin_layout Standard
When you edit and repost an already posted sale invoice, COGS goes out of
 sync and incorrect accounting entries are posted.
 This causes incorrect income statement.
\end_layout

\begin_layout Standard
To confirm this, display your income statement and write down the COGS amount.
 Now open and repost any past sales invoice.
 Compare the new COGS in income statement with the old one.
\end_layout

\begin_layout Standard
Ideally you should never edit an invoice.
 Instead post a reversal of the invoice (using a credit invoice) and create
 a new invoice.
 Check the box Enforce transaction reversal for all dates on System–Audit
 Control screen.
\end_layout

\begin_layout Standard
If you do need to edit invoices, you can correct COGS transactions by running
 the re-posting of invoices through menu System--Repost COGS.
\end_layout

\begin_layout Section
Ledger Doctor
\end_layout

\begin_layout Standard
Ledger Doctor is a tool to identify database inconsistencies in the SQL-Ledger
 database.
 Use the 
\series bold
'System--Maintenance--Ledger Doctor'
\series default
 menu to access it.
 '
\series bold
Ledger Doctor
\series default
' report itself does not corrects any error and just reports inconsistencies
 with hints on how to correct the inconsistency.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename doctor1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename doctor2.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Monitor
\end_layout

\begin_layout Standard
Using the 
\series bold
'System--Maintenance--Monitor'
\series default
 menu, you can run any SQL directly to your SQL-Ledger database.
 WARNING: Be careful with this option as no checks are made on what you
 do.
 You can quickly corrupt your database with a small mistake.
 If you are not sure how to use it then just ignore it.
 TIP: Always take a backup before running any SQL using this menu.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename monitor1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename monitor2.png
	scale 50

\end_inset


\end_layout

\begin_layout Chapter
Ledger Cart
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
LedgerCart instantly creates an on-line store and order system using information
 in your SQL-Ledger.
 You just drop the cgi scripts into your web server, install few CPAN modules,
 configure your db connection and you are ready to go.
\end_layout

\begin_layout Standard
Users can browse products and services, add items to their cart and checkout
 in a familiar way.
 New order is added to SQL-ledger sales orders.
\end_layout

\begin_layout Subsection
Features
\end_layout

\begin_layout Enumerate
Extremely simple to install and configure.
 
\end_layout

\begin_layout Enumerate
Can be installed on dedicated or shared hosting.
 
\end_layout

\begin_layout Enumerate
No additional database required.
 Retrieves and saves all data from/to SQL-Ledger dataset.
 
\end_layout

\begin_layout Enumerate
Easy to customize.
 All pages are standard html pages with template toolkit tokens.
 
\end_layout

\begin_layout Enumerate
Add new pages by creating standard html files and linking them in header.html
 or sidebar.html.
 
\end_layout

\begin_layout Enumerate
Look and feel can be customized using css and templates.
 
\end_layout

\begin_layout Enumerate
A single script 'index.pl' allows you to easily add more features by adding
 new actions.
 
\end_layout

\begin_layout Enumerate
Add item descriptions.
 These are displayed on product detail page and are stored in item notes.
 Item descriptions can use markdown syntax.
\end_layout

\begin_layout Enumerate
Add item images.
 LedgerCart automatically creates thumbnails and shows full image on item
 detail.
\end_layout

\begin_layout Enumerate
Visitors can now add items to their cart and checkout with their billing
 and shipping address.
\end_layout

\begin_layout Enumerate
New customers can register during checkout.
 
\end_layout

\begin_layout Enumerate
Existing customers can get a new password to their email using 'forgot password'.
 They can login with their email address and place orders.
\end_layout

\begin_layout Enumerate
Customers can browse their orders and invoices when logged-in.
\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Standard
No payment gateways support yet.
\end_layout

\begin_layout Subsection
Using LedgerCart as an online store 
\end_layout

\begin_layout Standard
LedgerCart can instantly turn your SL installation into an on-line store
 with little or no effort.
 Customers can place order using the familiar shopping cart interface.
 Your existing customers can generate a new password using 'Forgot password'
 feature.
\end_layout

\begin_layout Subsection
Using LedgerCart as Self service portal
\end_layout

\begin_layout Standard
LedgerCart can be used to serve as a self-service internet portal just like
 the self-service internet banking.
 Your customers can view: 
\end_layout

\begin_layout Enumerate
Their orders summary, order details and status 
\end_layout

\begin_layout Enumerate
Invoices summary and details 
\end_layout

\begin_layout Enumerate
Statements (payment summary and detail)
\end_layout

\begin_layout Subsection
Screen shots
\end_layout

\begin_layout Standard
Here are some screen shots.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cart_home.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cartlist.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cartitem1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cartitem2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cartcheckout.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Subsection
Software packages
\end_layout

\begin_layout Standard
Login to the server with your user name and password.
 To be able to install the software, we have to change to the “root” account.
 In this way, we get administrator rights.
 Type:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

su -
\end_layout

\end_inset


\end_layout

\begin_layout Standard
and enter your password.
 
\end_layout

\begin_layout Standard
With the following command, we install the packages we need for LedgerCart:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

apt-get install libcgi-simple-perl libdbi-perl libtemplate-perl libobject-signat
ure-perl libnumber-format-perl libmime-lite-perl libdbix-simple-perl libtext-mar
kdown-perl libdate-calc-perl libgd-gd2-perl libdatetime-perl libhtml-format-perl
 apg 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After that you need to install some further cpan modules:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

cpan GD cpan GD::Thumbnail cpan MIME::Lite::TT::HTML
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then install LedgerCart in your SQL-Ledger directory:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

git clone git://github.com/ledger123/ledgercart.git ledgercart
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Configuration and Admin access
\end_layout

\begin_layout Standard
To configure LedgerCart for your installation, edit the config.pl file and
 change the appropriate lines for your database connection information.
 You can also change default thumbnail sizes here.
\end_layout

\begin_layout Subsubsection
Admin User
\end_layout

\begin_layout Standard
To enable admin access, create a customer using SQL-Ledger with your email
 address and specify its id in $form{admin_id}.
 Now using “forgot password” link, generate a new password which will be
 sent to your email address.
\end_layout

\begin_layout Subsubsection
Editing item descriptions, images and thumbnails
\end_layout

\begin_layout Standard
When you are logged in as admin and visit item detail pages, you can edit
 item descriptions as well as upload images and auto-create thumbnails.
\end_layout

\begin_layout Standard
Item descriptions text uses simple markup language 'markdown' for html elements.
 No html is allowed for security reasons.
 See http://daringfireball.net/projects/markdown/dingus for markdown syntax.
 Item descriptions are stored in item notes column and can be editing from
 within SQL-Ledger as well.
\end_layout

\begin_layout Subsubsection
Editing pages through admin access
\end_layout

\begin_layout Standard
Once you login as admin, you can see 'Edit' links.
 Pages can be edited right away.
 You can use standard html and template toolkit tokens to edit pages.
\end_layout

\begin_layout Subsubsection
Marking 'hot' and 'new' items
\end_layout

\begin_layout Standard
When you are logged in as admin, add items to your cart and click the 'Save
 cart as hot items' or 'Save cart as new items'.
 This will mark those items as hot or new and will display them on man page
 (in default templates).
 In future, hot/new functionality will be made to work based upon actual
 'hot' or 'new' items.
\end_layout

\begin_layout Subsection
Customization
\end_layout

\begin_layout Standard
LedgerCart is extremely easy to customize.
 LedgerCart consists of one big gateway script 'index.pl' which processes
 html templates created with Template::Toolkit.
\end_layout

\begin_layout Enumerate
Template::Toolkit templates are standard html files which can include Perl
 variables within [% and %] delimiters.
 You can copy the default templates and modify them as you please.
\end_layout

\begin_layout Enumerate
New pages can be added by creating standard html files and linking them
 to 'templatesfolder/header.html' or 'templatesfolder/sidebar.html'.
\end_layout

\begin_layout Enumerate
You can also customize the theme.css to change the colors and other look
 and feel according to your taste.
\end_layout

\begin_layout Enumerate
Expert users can modify the 'index.pl' file to add their own variables which
 can be interpolated within your LedgerCart templates.
\end_layout

\begin_layout Chapter
Development and Customization
\end_layout

\begin_layout Section
Customization
\end_layout

\begin_layout Standard
SQL-Ledger can be customized in three ways:
\end_layout

\begin_layout Subsection
custom_xx.pl files
\end_layout

\begin_layout Standard
You can create your own functions or override any existing function by creating
 custom scripts in custom_xx.pl files and putting them in bin/mozilla folder.
 For example, to add new functions to gl.pl file, add these functions to
 custom_gl.pl file and put this file into bin/mozilla/ folder.
 This file will be automatically loaded by SQL-Ledger before running any
 functions in gl.pl files.
\end_layout

\begin_layout Standard
Once your new functions are there, you can call them using your own custom
 menu.
 Custom menu entries are put in custom_menu.ini and follow the same syntax
 as that of menu.ini.
 This method of extending the SQL-Ledger is upgrade-safe and is the recommended
 way.
\end_layout

\begin_layout Subsubsection
Custom Modules
\end_layout

\begin_layout Standard
You can build your own modules.
 To write a module, you need to create at least three files:
\end_layout

\begin_layout Enumerate
Module back-end code which will reside in ./SQL-Ledger/SL/MyModule.pm 
\end_layout

\begin_layout Enumerate
Module front-end code which will reside in ./SQL-Ledger/bin/mozilla/mymodule.pl
 
\end_layout

\begin_layout Enumerate
Gateway script in ./SQL-Ledger.
 (You just need to make a copy of an existing one.
 For example cp gl.pl mymodule.pl in ./SQL-Ledger/ folder.
 
\end_layout

\begin_layout Standard
This method is also upgrade safe.
\end_layout

\begin_layout Subsection
Modify the source code
\end_layout

\begin_layout Standard
Sometimes there is a need to directly alter the SQL-Ledger source code for
 particular needs.
 We have, for example, modified few reports (GL Transactions, All Items)
 in this way.
 Your changes, however, will be overwritten when you upgrade to new version
 and you will need to port these changes again to the new version.
\end_layout

\begin_layout Standard
A bit discipline and an SCM software like GIT can help manage such changes
 or patches with easy.
 We, at ledger123.com, use GIT to track and manage such changes across newer
 versions of SQL-Ledger.
\end_layout

\begin_layout Section
SQL Queries
\end_layout

\begin_layout Standard
These sql queries for SQL-Ledger can be used in phpPgAdmin or psql.
\end_layout

\begin_layout Subsection
Simple SQL Queries
\end_layout

\begin_layout Subsubsection
Sales summary report
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	ar.invnumber,
\end_layout

\begin_layout Plain Layout

	ar.transdate,
\end_layout

\begin_layout Plain Layout

	c.name AS customer,
\end_layout

\begin_layout Plain Layout

	ar.netamount,
\end_layout

\begin_layout Plain Layout

	ar.amount - ar.netamount AS tax,
\end_layout

\begin_layout Plain Layout

	ar.amount,
\end_layout

\begin_layout Plain Layout

	ar.paid,
\end_layout

\begin_layout Plain Layout

	ar.invoice
\end_layout

\begin_layout Plain Layout

FROM ar
\end_layout

\begin_layout Plain Layout

JOIN customer c ON (c.id = ar.customer_id);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sales summary report with department and warehouse
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	ar.invnumber,
\end_layout

\begin_layout Plain Layout

	ar.transdate,
\end_layout

\begin_layout Plain Layout

	c.name AS customer,
\end_layout

\begin_layout Plain Layout

	ar.netamount,
\end_layout

\begin_layout Plain Layout

	ar.amount - ar.netamount AS tax,
\end_layout

\begin_layout Plain Layout

	ar.amount,
\end_layout

\begin_layout Plain Layout

	ar.paid,
\end_layout

\begin_layout Plain Layout

	ar.invoice,
\end_layout

\begin_layout Plain Layout

	d.description AS department,
\end_layout

\begin_layout Plain Layout

	w.description AS warehouse
\end_layout

\begin_layout Plain Layout

FROM ar
\end_layout

\begin_layout Plain Layout

JOIN customer c ON (c.id = ar.customer_id)
\end_layout

\begin_layout Plain Layout

JOIN department d ON (d.id = ar.department_id)
\end_layout

\begin_layout Plain Layout

JOIN warehouse W ON (w.id = ar.warehouse_id);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sales report with items
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	ar.invnumber,
\end_layout

\begin_layout Plain Layout

	ar.transdate,
\end_layout

\begin_layout Plain Layout

    c.name AS customer
\end_layout

\begin_layout Plain Layout

	p.partnumber,
\end_layout

\begin_layout Plain Layout

	ar.description,
\end_layout

\begin_layout Plain Layout

	i.qty,
\end_layout

\begin_layout Plain Layout

	i.sellprice,
\end_layout

\begin_layout Plain Layout

	i.qty * i.sellprice AS extended
\end_layout

\begin_layout Plain Layout

FROM ar
\end_layout

\begin_layout Plain Layout

JOIN customer c ON (c.id = ar.customer_id)
\end_layout

\begin_layout Plain Layout

JOIN invoice i ON (i.id = ar.trans_id);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
List of customers
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	customernumber,
\end_layout

\begin_layout Plain Layout

	name,
\end_layout

\begin_layout Plain Layout

	creditlimit
\end_layout

\begin_layout Plain Layout

FROM customer
\end_layout

\begin_layout Plain Layout

WHERE LOWER(name) LIKE '%bank%'
\end_layout

\begin_layout Plain Layout

ORDER BY name;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Cash accounts with current balances
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	accno,
\end_layout

\begin_layout Plain Layout

	description,
\end_layout

\begin_layout Plain Layout

	(
\end_layout

\begin_layout Plain Layout

		SELECT SUM(amount) FROM acc_trans
\end_layout

\begin_layout Plain Layout

		WHERE acc_trans.chart_id = chart.id
\end_layout

\begin_layout Plain Layout

	) AS balance 
\end_layout

\begin_layout Plain Layout

FROM chart
\end_layout

\begin_layout Plain Layout

WHERE link LIKE '%_paid%';
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Parts list
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	p.partnumber,
\end_layout

\begin_layout Plain Layout

	pg.partsgroup,
\end_layout

\begin_layout Plain Layout

	p.description,
\end_layout

\begin_layout Plain Layout

	p.lastcost,
\end_layout

\begin_layout Plain Layout

	p.rop,
\end_layout

\begin_layout Plain Layout

	p.rop * p.lastcost AS reorder_amount
\end_layout

\begin_layout Plain Layout

FROM parts p
\end_layout

\begin_layout Plain Layout

JOIN partsgroup pg ON (pg.id = p.partsgroup_id)
\end_layout

\begin_layout Plain Layout

WHERE inventory_accno_id IS NOT NULL
\end_layout

\begin_layout Plain Layout

ORDER BY partnumber;
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Advanced SQL Queries
\end_layout

\begin_layout Subsubsection
Inventory on hand on specific date
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT   
\end_layout

\begin_layout Plain Layout

	p.partnumber,
\end_layout

\begin_layout Plain Layout

	p.description,
\end_layout

\begin_layout Plain Layout

	pg.partsgroup,
\end_layout

\begin_layout Plain Layout

	p.unit,
\end_layout

\begin_layout Plain Layout

	(
\end_layout

\begin_layout Plain Layout

		SELECT SUM(0-i.qty) AS onhand
\end_layout

\begin_layout Plain Layout

		FROM invoice i
\end_layout

\begin_layout Plain Layout

		JOIN ap ON (ap.id = i.trans_id)
\end_layout

\begin_layout Plain Layout

		WHERE ap.transdate <= '01-01-08' AND i.parts_id = p.id
\end_layout

\begin_layout Plain Layout

	) AS purchase,
\end_layout

\begin_layout Plain Layout

	(
\end_layout

\begin_layout Plain Layout

		SELECT SUM(i.qty) AS onhand
\end_layout

\begin_layout Plain Layout

		FROM invoice i
\end_layout

\begin_layout Plain Layout

		JOIN ar ON (ar.id = i.trans_id)
\end_layout

\begin_layout Plain Layout

		WHERE ar.transdate <= '01-01-08'
\end_layout

\begin_layout Plain Layout

		AND i.parts_id = p.id
\end_layout

\begin_layout Plain Layout

	) AS sale
\end_layout

\begin_layout Plain Layout

FROM parts p 
\end_layout

\begin_layout Plain Layout

LEFT JOIN partsgroup pg 
\end_layout

\begin_layout Plain Layout

ON (pg.id = p.partsgroup_id);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Customer balances on a specific date
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	ct.id,
\end_layout

\begin_layout Plain Layout

	ct.customernumber,
\end_layout

\begin_layout Plain Layout

	ct.name,
\end_layout

\begin_layout Plain Layout

	SUM(0 - ac.amount) AS balance
\end_layout

\begin_layout Plain Layout

FROM customer ct
\end_layout

\begin_layout Plain Layout

JOIN ar aa ON (ct.id = aa.customer_id)
\end_layout

\begin_layout Plain Layout

JOIN acc_trans ac ON (aa.id = ac.trans_id)
\end_layout

\begin_layout Plain Layout

JOIN chart c ON (c.id = ac.chart_id)
\end_layout

\begin_layout Plain Layout

WHERE (ac.transdate <= '06-30-2007')
\end_layout

\begin_layout Plain Layout

AND (c.link = 'AR')
\end_layout

\begin_layout Plain Layout

GROUP BY 1,2,3
\end_layout

\begin_layout Plain Layout

ORDER BY customernumber;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sales summary by month
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	TO_CHAR(transdate, 'YY-MM') AS month,
\end_layout

\begin_layout Plain Layout

	d.description AS department,
\end_layout

\begin_layout Plain Layout

	SUM(netamount)
\end_layout

\begin_layout Plain Layout

FROM ar
\end_layout

\begin_layout Plain Layout

JOIN department d ON (d.id = ar.department_id)
\end_layout

\begin_layout Plain Layout

WHERE (transdate BETWEEN '01.07.2005' AND '30.06.2006')
\end_layout

\begin_layout Plain Layout

GROUP BY TO_CHAR(transdate, 'YY-MM'), d.description;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sales Summary by group and month
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily}"
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	d.description AS department,
\end_layout

\begin_layout Plain Layout

	pg.partsgroup,
\end_layout

\begin_layout Plain Layout

	TO_CHAR(ar.transdate, 'YY-MM') AS month,
\end_layout

\begin_layout Plain Layout

	SUM(0 - i.qty * i.sellprice) AS amount
\end_layout

\begin_layout Plain Layout

FROM invoice i
\end_layout

\begin_layout Plain Layout

JOIN ar ON (ar.id = i.trans_id)
\end_layout

\begin_layout Plain Layout

JOIN parts p ON (p.id = i.parts_id)
\end_layout

\begin_layout Plain Layout

JOIN partsgroup pg ON (pg.id = p.partsgroup_id)
\end_layout

\begin_layout Plain Layout

JOIN department d ON (d.id = ar.department_id)
\end_layout

\begin_layout Plain Layout

WHERE ar.transdate BETWEEN '01.07.2005' AND '30.06.2006'
\end_layout

\begin_layout Plain Layout

GROUP BY 
\end_layout

\begin_layout Plain Layout

	d.description,
\end_layout

\begin_layout Plain Layout

	pg.partsgroup,
\end_layout

\begin_layout Plain Layout

	TO_CHAR(ar.transdate, 'YY-MM')
\end_layout

\begin_layout Plain Layout

ORDER BY 1, 2
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Cash received today with age of AR in days
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	c.accno,
\end_layout

\begin_layout Plain Layout

	c.description AS acc_title,
\end_layout

\begin_layout Plain Layout

	d.description AS department,
\end_layout

\begin_layout Plain Layout

	a.invnumber,
\end_layout

\begin_layout Plain Layout

	ct.name,
\end_layout

\begin_layout Plain Layout

	ac.transdate - a.transdate AS days,
\end_layout

\begin_layout Plain Layout

	ac.source,
\end_layout

\begin_layout Plain Layout

	ac.amount,
\end_layout

\begin_layout Plain Layout

	e.name AS salesper,
\end_layout

\begin_layout Plain Layout

	a.notes,
\end_layout

\begin_layout Plain Layout

	ac.memo
\end_layout

\begin_layout Plain Layout

FROM ar a
\end_layout

\begin_layout Plain Layout

JOIN acc_trans ac ON (a.id = ac.trans_id)
\end_layout

\begin_layout Plain Layout

JOIN chart c ON (ac.chart_id = c.id)
\end_layout

\begin_layout Plain Layout

JOIN customer ct ON (a.customer_id = ct.id)
\end_layout

\begin_layout Plain Layout

JOIN employee e ON (a.employee_id = e.id)
\end_layout

\begin_layout Plain Layout

LEFT JOIN department d ON (d.id = a.department_id)
\end_layout

\begin_layout Plain Layout

WHERE (ac.transdate = '30.05.06')
\end_layout

\begin_layout Plain Layout

	AND(c.link LIKE '%AR_paid%')
\end_layout

\begin_layout Plain Layout

	AND (
\end_layout

\begin_layout Plain Layout

		a.department_id IN 
\end_layout

\begin_layout Plain Layout

		(SELECT id 
\end_layout

\begin_layout Plain Layout

		FROM department
\end_layout

\begin_layout Plain Layout

		WHERE description IN ('LC','LS'))
\end_layout

\begin_layout Plain Layout

	)
\end_layout

\begin_layout Plain Layout

ORDER BY days;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Trial Balance with Month Headings
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

SELECT 
\end_layout

\begin_layout Plain Layout

	accno,
\end_layout

\begin_layout Plain Layout

	description,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '06-01') AS jan,  
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '06-02') AS fab,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '06-03') AS mar,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '06-04') AS apr,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '06-05') AS may,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '06-06') AS jun,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '05-07') AS jul,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '05-08') AS aug,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '05-09') AS sep,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '05-10') AS oct,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '05-11') AS nov,
\end_layout

\begin_layout Plain Layout

	(SELECT SUM(amount) FROM acc_trans ac   WHERE ac.chart_id = chart.id   AND
 TO_CHAR(transdate, 'YY-MM') = '05-12') AS dec, 
\end_layout

\begin_layout Plain Layout

FROM chart
\end_layout

\begin_layout Plain Layout

WHERE charttype = 'A'
\end_layout

\begin_layout Plain Layout

ORDER BY accno;
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Queries to troubleshoot database problems
\end_layout

\begin_layout Subsubsection
Transactions without departments
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT 'AR', id, invnumber AS reference, transdate 
\end_layout

\begin_layout Plain Layout

FROM ar 
\end_layout

\begin_layout Plain Layout

WHERE id NOT IN (SELECT DISTINCT trans_id FROM dpt_trans)
\end_layout

\begin_layout Plain Layout

UNION ALL
\end_layout

\begin_layout Plain Layout

SELECT 'AP', id, invnumber AS reference, transdate 
\end_layout

\begin_layout Plain Layout

FROM ap 
\end_layout

\begin_layout Plain Layout

WHERE id NOT IN (SELECT DISTINCT trans_id FROM dpt_trans)
\end_layout

\begin_layout Plain Layout

UNION ALL
\end_layout

\begin_layout Plain Layout

SELECT 'GL', id, reference, transdate 
\end_layout

\begin_layout Plain Layout

FROM gl 
\end_layout

\begin_layout Plain Layout

WHERE id NOT IN (SELECT DISTINCT trans_id FROM dpt_trans);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Unbalanced Journals
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT 'GL' AS mod, gl.reference, SUM(ac.amount) 
\end_layout

\begin_layout Plain Layout

FROM acc_trans ac 
\end_layout

\begin_layout Plain Layout

JOIN gl ON (gl.id = ac.trans_id) 
\end_layout

\begin_layout Plain Layout

GROUP BY 1, 2  
\end_layout

\begin_layout Plain Layout

HAVING SUM(ac.amount) <> 0
\end_layout

\begin_layout Plain Layout

UNION ALL
\end_layout

\begin_layout Plain Layout

SELECT 'AR' AS mod, ar.invnumber, SUM(ac.amount) 
\end_layout

\begin_layout Plain Layout

FROM acc_trans ac JOIN ar ON (ar.id = ac.trans_id) 
\end_layout

\begin_layout Plain Layout

GROUP BY 1, 2  
\end_layout

\begin_layout Plain Layout

HAVING SUM(ac.amount) <> 0
\end_layout

\begin_layout Plain Layout

UNION ALL
\end_layout

\begin_layout Plain Layout

SELECT 'AP' AS mod, ap.invnumber, SUM(ac.amount) 
\end_layout

\begin_layout Plain Layout

FROM acc_trans ac 
\end_layout

\begin_layout Plain Layout

JOIN ap ON (ap.id = ac.trans_id) 
\end_layout

\begin_layout Plain Layout

GROUP BY 1, 2  HAVING SUM(ac.amount) <> 0
\end_layout

\begin_layout Plain Layout

ORDER BY 3
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Orphan Transactions
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT *
\end_layout

\begin_layout Plain Layout

FROM acc_trans 
\end_layout

\begin_layout Plain Layout

WHERE trans_id NOT IN (
\end_layout

\begin_layout Plain Layout

	SELECT id FROM ar UNION ALL SELECT id FROM ap UNION ALL SELECT id FROM
 gl
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Correcting Assemblies Onhand
\end_layout

\begin_layout Standard
Due to a bug/gotcha in orders handling in official SQL-Ledger, parts on
 hand can go out of sync from actual transactions.
 Following query will help you find the correct on hand quantity for a given
 assembly.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout

SELECT 'Purchased', SUM(0-qty)  FROM invoice  WHERE parts_id = (SELECT id
 FROM parts WHERE partnumber='TW01') AND trans_id IN (SELECT id FROM ap)
\end_layout

\begin_layout Plain Layout

UNION ALL
\end_layout

\begin_layout Plain Layout

SELECT 'Sold', SUM(0-qty) FROM invoice WHERE parts_id IN (SELECT aid FROM
 assembly WHERE parts_id = (SELECT id FROM parts WHERE partnumber='TW01'))
 AND trans_id IN (SELECT id FROM ar)
\end_layout

\begin_layout Plain Layout

UNION ALL
\end_layout

\begin_layout Plain Layout

SELECT 'Onhand', SUM(0-onhand) FROM parts WHERE id IN (SELECT aid FROM assembly
 WHERE parts_id = (SELECT id FROM parts WHERE partnumber='TW01'));
\end_layout

\end_inset


\end_layout

\begin_layout Section
API
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
SQL-Ledger allows you to call any of its functions from command line.
 An example will better illustrate this.
\end_layout

\begin_layout Standard
The following code run from your Linux/Unix shell will add a new customer
 to the customers table:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./ct.pl " 
\end_layout

\begin_layout Plain Layout

login=armaghan
\end_layout

\begin_layout Plain Layout

&password=armaghan
\end_layout

\begin_layout Plain Layout

&path=bin/mozilla
\end_layout

\begin_layout Plain Layout

&db=customer
\end_layout

\begin_layout Plain Layout

&action=save
\end_layout

\begin_layout Plain Layout

&typeofcontact=company
\end_layout

\begin_layout Plain Layout

&name=Ledger123
\end_layout

\begin_layout Plain Layout

&firstname=Armaghan
\end_layout

\begin_layout Plain Layout

&lastname=Saqib
\end_layout

\begin_layout Plain Layout

&city=London
\end_layout

\begin_layout Plain Layout

"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You could also insert this information using plain old SQL INSERT statement
 but here is the problem.
 Customer information is stored in at least three tables (customer, contact,
 address).
 You have to make sure you INSERT rows with correct id numbers in all three
 tables.
\end_layout

\begin_layout Standard
On the other hand API takes care of adding proper data rows in each tables
 with a single call like above.
 API also validates your data and runs any logic which is run when you are
 adding a customer through web interface.
 For example if you have defined a sequence for customer numbers, the next
 number is assigned automatically from that sequence.
\end_layout

\begin_layout Subsection
API Uses
\end_layout

\begin_layout Standard
API can be used to “simulate” any SQL-Ledger function from command line.
 You can add customers, vendors, parts as well as any type of transaction
 (invoices, cash receipts and payments etc.)
\end_layout

\begin_layout Standard
This makes it very easy to integrate SQL-Ledger with any other application.
 For example you can integrate it with your CRM solution, POS system, or
 e-commerce solutions like AgoraCart or Interchange.
\end_layout

\begin_layout Standard
API also allows you to add new data entry interfaces with ease.
 All you need to develop is the code which will interact with users and
 leave the rest to the API.
\end_layout

\begin_layout Standard
Import invoices and payment functions built in new versions of SQL-Ledger
 are in fact “newer interfaces” built using the API.
\end_layout

\begin_layout Subsection
Calling from PHP
\end_layout

\begin_layout Standard
You can make API calls from any language using its shell execution mechnisim.
 For example you can use the following php code to make SL api call.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<?php
\end_layout

\begin_layout Plain Layout

$module = './ct.pl';
\end_layout

\begin_layout Plain Layout

$params = 'login=armaghan';
\end_layout

\begin_layout Plain Layout

$params .= '&password=armaghan';
\end_layout

\begin_layout Plain Layout

$params .= '&path=bin/mozilla';
\end_layout

\begin_layout Plain Layout

$params .= '&db=customer';
\end_layout

\begin_layout Plain Layout

$params .= '&action=save';
\end_layout

\begin_layout Plain Layout

$params .= '&typeofcontact=company';
\end_layout

\begin_layout Plain Layout

$params .= '&name=Ledger123';
\end_layout

\begin_layout Plain Layout

$params .= '&firstname=Armaghan';
\end_layout

\begin_layout Plain Layout

$params .= '&lastname=Saqib';
\end_layout

\begin_layout Plain Layout

$params .= '&city=London';
\end_layout

\begin_layout Plain Layout

$output = shell_exec("$module 
\backslash
"$params
\backslash
"");
\end_layout

\begin_layout Plain Layout

echo "<pre>$output</pre>";
\end_layout

\begin_layout Plain Layout

?>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
END
\end_layout

\end_body
\end_document
